
Sprints_LED_V3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  00800060  00001e4a  00001ede  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800194  00800194  00002012  2**0
                  ALLOC
  3 .stab         00002ef8  00000000  00000000  00002014  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002770  00000000  00000000  00004f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000767c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000197  00000000  00000000  000077bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a88  00000000  00000000  00007953  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eb7  00000000  00000000  000093db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000df7  00000000  00000000  0000a292  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b08c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002bf  00000000  00000000  0000b1ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007f2  00000000  00000000  0000b4ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__vector_1>
       8:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e4       	ldi	r30, 0x4A	; 74
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3a       	cpi	r26, 0xAC	; 172
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ae 0c 	call	0x195c	; 0x195c <main>
      8a:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 cb 02 	call	0x596	; 0x596 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__epilogue_restores__+0x18>

0000043e <__divsf3>:
     43e:	a8 e1       	ldi	r26, 0x18	; 24
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <__prologue_saves__+0x10>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	b9 e0       	ldi	r27, 0x09	; 9
     45c:	eb 2e       	mov	r14, r27
     45e:	f1 2c       	mov	r15, r1
     460:	ec 0e       	add	r14, r28
     462:	fd 1e       	adc	r15, r29
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	b7 01       	movw	r22, r14
     46a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     46e:	8e 01       	movw	r16, r28
     470:	0f 5e       	subi	r16, 0xEF	; 239
     472:	1f 4f       	sbci	r17, 0xFF	; 255
     474:	ce 01       	movw	r24, r28
     476:	05 96       	adiw	r24, 0x05	; 5
     478:	b8 01       	movw	r22, r16
     47a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     47e:	29 85       	ldd	r18, Y+9	; 0x09
     480:	22 30       	cpi	r18, 0x02	; 2
     482:	08 f4       	brcc	.+2      	; 0x486 <__divsf3+0x48>
     484:	7e c0       	rjmp	.+252    	; 0x582 <__divsf3+0x144>
     486:	39 89       	ldd	r19, Y+17	; 0x11
     488:	32 30       	cpi	r19, 0x02	; 2
     48a:	10 f4       	brcc	.+4      	; 0x490 <__divsf3+0x52>
     48c:	b8 01       	movw	r22, r16
     48e:	7c c0       	rjmp	.+248    	; 0x588 <__divsf3+0x14a>
     490:	8a 85       	ldd	r24, Y+10	; 0x0a
     492:	9a 89       	ldd	r25, Y+18	; 0x12
     494:	89 27       	eor	r24, r25
     496:	8a 87       	std	Y+10, r24	; 0x0a
     498:	24 30       	cpi	r18, 0x04	; 4
     49a:	11 f0       	breq	.+4      	; 0x4a0 <__divsf3+0x62>
     49c:	22 30       	cpi	r18, 0x02	; 2
     49e:	31 f4       	brne	.+12     	; 0x4ac <__divsf3+0x6e>
     4a0:	23 17       	cp	r18, r19
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <__divsf3+0x68>
     4a4:	6e c0       	rjmp	.+220    	; 0x582 <__divsf3+0x144>
     4a6:	60 e6       	ldi	r22, 0x60	; 96
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	6e c0       	rjmp	.+220    	; 0x588 <__divsf3+0x14a>
     4ac:	34 30       	cpi	r19, 0x04	; 4
     4ae:	39 f4       	brne	.+14     	; 0x4be <__divsf3+0x80>
     4b0:	1d 86       	std	Y+13, r1	; 0x0d
     4b2:	1e 86       	std	Y+14, r1	; 0x0e
     4b4:	1f 86       	std	Y+15, r1	; 0x0f
     4b6:	18 8a       	std	Y+16, r1	; 0x10
     4b8:	1c 86       	std	Y+12, r1	; 0x0c
     4ba:	1b 86       	std	Y+11, r1	; 0x0b
     4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__divsf3+0x88>
     4be:	32 30       	cpi	r19, 0x02	; 2
     4c0:	21 f4       	brne	.+8      	; 0x4ca <__divsf3+0x8c>
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	89 87       	std	Y+9, r24	; 0x09
     4c6:	b7 01       	movw	r22, r14
     4c8:	5f c0       	rjmp	.+190    	; 0x588 <__divsf3+0x14a>
     4ca:	2b 85       	ldd	r18, Y+11	; 0x0b
     4cc:	3c 85       	ldd	r19, Y+12	; 0x0c
     4ce:	8b 89       	ldd	r24, Y+19	; 0x13
     4d0:	9c 89       	ldd	r25, Y+20	; 0x14
     4d2:	28 1b       	sub	r18, r24
     4d4:	39 0b       	sbc	r19, r25
     4d6:	3c 87       	std	Y+12, r19	; 0x0c
     4d8:	2b 87       	std	Y+11, r18	; 0x0b
     4da:	ed 84       	ldd	r14, Y+13	; 0x0d
     4dc:	fe 84       	ldd	r15, Y+14	; 0x0e
     4de:	0f 85       	ldd	r16, Y+15	; 0x0f
     4e0:	18 89       	ldd	r17, Y+16	; 0x10
     4e2:	ad 88       	ldd	r10, Y+21	; 0x15
     4e4:	be 88       	ldd	r11, Y+22	; 0x16
     4e6:	cf 88       	ldd	r12, Y+23	; 0x17
     4e8:	d8 8c       	ldd	r13, Y+24	; 0x18
     4ea:	ea 14       	cp	r14, r10
     4ec:	fb 04       	cpc	r15, r11
     4ee:	0c 05       	cpc	r16, r12
     4f0:	1d 05       	cpc	r17, r13
     4f2:	40 f4       	brcc	.+16     	; 0x504 <__divsf3+0xc6>
     4f4:	ee 0c       	add	r14, r14
     4f6:	ff 1c       	adc	r15, r15
     4f8:	00 1f       	adc	r16, r16
     4fa:	11 1f       	adc	r17, r17
     4fc:	21 50       	subi	r18, 0x01	; 1
     4fe:	30 40       	sbci	r19, 0x00	; 0
     500:	3c 87       	std	Y+12, r19	; 0x0c
     502:	2b 87       	std	Y+11, r18	; 0x0b
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e4       	ldi	r27, 0x40	; 64
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	ea 14       	cp	r14, r10
     51a:	fb 04       	cpc	r15, r11
     51c:	0c 05       	cpc	r16, r12
     51e:	1d 05       	cpc	r17, r13
     520:	40 f0       	brcs	.+16     	; 0x532 <__divsf3+0xf4>
     522:	28 2b       	or	r18, r24
     524:	39 2b       	or	r19, r25
     526:	4a 2b       	or	r20, r26
     528:	5b 2b       	or	r21, r27
     52a:	ea 18       	sub	r14, r10
     52c:	fb 08       	sbc	r15, r11
     52e:	0c 09       	sbc	r16, r12
     530:	1d 09       	sbc	r17, r13
     532:	b6 95       	lsr	r27
     534:	a7 95       	ror	r26
     536:	97 95       	ror	r25
     538:	87 95       	ror	r24
     53a:	ee 0c       	add	r14, r14
     53c:	ff 1c       	adc	r15, r15
     53e:	00 1f       	adc	r16, r16
     540:	11 1f       	adc	r17, r17
     542:	6f 5f       	subi	r22, 0xFF	; 255
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	6f 31       	cpi	r22, 0x1F	; 31
     548:	71 05       	cpc	r23, r1
     54a:	31 f7       	brne	.-52     	; 0x518 <__divsf3+0xda>
     54c:	da 01       	movw	r26, r20
     54e:	c9 01       	movw	r24, r18
     550:	8f 77       	andi	r24, 0x7F	; 127
     552:	90 70       	andi	r25, 0x00	; 0
     554:	a0 70       	andi	r26, 0x00	; 0
     556:	b0 70       	andi	r27, 0x00	; 0
     558:	80 34       	cpi	r24, 0x40	; 64
     55a:	91 05       	cpc	r25, r1
     55c:	a1 05       	cpc	r26, r1
     55e:	b1 05       	cpc	r27, r1
     560:	61 f4       	brne	.+24     	; 0x57a <__divsf3+0x13c>
     562:	27 fd       	sbrc	r18, 7
     564:	0a c0       	rjmp	.+20     	; 0x57a <__divsf3+0x13c>
     566:	e1 14       	cp	r14, r1
     568:	f1 04       	cpc	r15, r1
     56a:	01 05       	cpc	r16, r1
     56c:	11 05       	cpc	r17, r1
     56e:	29 f0       	breq	.+10     	; 0x57a <__divsf3+0x13c>
     570:	20 5c       	subi	r18, 0xC0	; 192
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	4f 4f       	sbci	r20, 0xFF	; 255
     576:	5f 4f       	sbci	r21, 0xFF	; 255
     578:	20 78       	andi	r18, 0x80	; 128
     57a:	2d 87       	std	Y+13, r18	; 0x0d
     57c:	3e 87       	std	Y+14, r19	; 0x0e
     57e:	4f 87       	std	Y+15, r20	; 0x0f
     580:	58 8b       	std	Y+16, r21	; 0x10
     582:	be 01       	movw	r22, r28
     584:	67 5f       	subi	r22, 0xF7	; 247
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	cb 01       	movw	r24, r22
     58a:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     58e:	68 96       	adiw	r28, 0x18	; 24
     590:	ea e0       	ldi	r30, 0x0A	; 10
     592:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <__epilogue_restores__+0x10>

00000596 <__gesf2>:
     596:	a8 e1       	ldi	r26, 0x18	; 24
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	e1 ed       	ldi	r30, 0xD1	; 209
     59c:	f2 e0       	ldi	r31, 0x02	; 2
     59e:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__prologue_saves__+0x18>
     5a2:	69 83       	std	Y+1, r22	; 0x01
     5a4:	7a 83       	std	Y+2, r23	; 0x02
     5a6:	8b 83       	std	Y+3, r24	; 0x03
     5a8:	9c 83       	std	Y+4, r25	; 0x04
     5aa:	2d 83       	std	Y+5, r18	; 0x05
     5ac:	3e 83       	std	Y+6, r19	; 0x06
     5ae:	4f 83       	std	Y+7, r20	; 0x07
     5b0:	58 87       	std	Y+8, r21	; 0x08
     5b2:	89 e0       	ldi	r24, 0x09	; 9
     5b4:	e8 2e       	mov	r14, r24
     5b6:	f1 2c       	mov	r15, r1
     5b8:	ec 0e       	add	r14, r28
     5ba:	fd 1e       	adc	r15, r29
     5bc:	ce 01       	movw	r24, r28
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	b7 01       	movw	r22, r14
     5c2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     5c6:	8e 01       	movw	r16, r28
     5c8:	0f 5e       	subi	r16, 0xEF	; 239
     5ca:	1f 4f       	sbci	r17, 0xFF	; 255
     5cc:	ce 01       	movw	r24, r28
     5ce:	05 96       	adiw	r24, 0x05	; 5
     5d0:	b8 01       	movw	r22, r16
     5d2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     5d6:	89 85       	ldd	r24, Y+9	; 0x09
     5d8:	82 30       	cpi	r24, 0x02	; 2
     5da:	40 f0       	brcs	.+16     	; 0x5ec <__gesf2+0x56>
     5dc:	89 89       	ldd	r24, Y+17	; 0x11
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	28 f0       	brcs	.+10     	; 0x5ec <__gesf2+0x56>
     5e2:	c7 01       	movw	r24, r14
     5e4:	b8 01       	movw	r22, r16
     5e6:	0e 94 64 05 	call	0xac8	; 0xac8 <__fpcmp_parts_f>
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <__gesf2+0x58>
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
     5ee:	68 96       	adiw	r28, 0x18	; 24
     5f0:	e6 e0       	ldi	r30, 0x06	; 6
     5f2:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__epilogue_restores__+0x18>

000005f6 <__fixsfsi>:
     5f6:	ac e0       	ldi	r26, 0x0C	; 12
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f3 e0       	ldi	r31, 0x03	; 3
     5fe:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__prologue_saves__+0x20>
     602:	69 83       	std	Y+1, r22	; 0x01
     604:	7a 83       	std	Y+2, r23	; 0x02
     606:	8b 83       	std	Y+3, r24	; 0x03
     608:	9c 83       	std	Y+4, r25	; 0x04
     60a:	ce 01       	movw	r24, r28
     60c:	01 96       	adiw	r24, 0x01	; 1
     60e:	be 01       	movw	r22, r28
     610:	6b 5f       	subi	r22, 0xFB	; 251
     612:	7f 4f       	sbci	r23, 0xFF	; 255
     614:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     618:	8d 81       	ldd	r24, Y+5	; 0x05
     61a:	82 30       	cpi	r24, 0x02	; 2
     61c:	61 f1       	breq	.+88     	; 0x676 <__fixsfsi+0x80>
     61e:	82 30       	cpi	r24, 0x02	; 2
     620:	50 f1       	brcs	.+84     	; 0x676 <__fixsfsi+0x80>
     622:	84 30       	cpi	r24, 0x04	; 4
     624:	21 f4       	brne	.+8      	; 0x62e <__fixsfsi+0x38>
     626:	8e 81       	ldd	r24, Y+6	; 0x06
     628:	88 23       	and	r24, r24
     62a:	51 f1       	breq	.+84     	; 0x680 <__fixsfsi+0x8a>
     62c:	2e c0       	rjmp	.+92     	; 0x68a <__fixsfsi+0x94>
     62e:	2f 81       	ldd	r18, Y+7	; 0x07
     630:	38 85       	ldd	r19, Y+8	; 0x08
     632:	37 fd       	sbrc	r19, 7
     634:	20 c0       	rjmp	.+64     	; 0x676 <__fixsfsi+0x80>
     636:	6e 81       	ldd	r22, Y+6	; 0x06
     638:	2f 31       	cpi	r18, 0x1F	; 31
     63a:	31 05       	cpc	r19, r1
     63c:	1c f0       	brlt	.+6      	; 0x644 <__fixsfsi+0x4e>
     63e:	66 23       	and	r22, r22
     640:	f9 f0       	breq	.+62     	; 0x680 <__fixsfsi+0x8a>
     642:	23 c0       	rjmp	.+70     	; 0x68a <__fixsfsi+0x94>
     644:	8e e1       	ldi	r24, 0x1E	; 30
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	82 1b       	sub	r24, r18
     64a:	93 0b       	sbc	r25, r19
     64c:	29 85       	ldd	r18, Y+9	; 0x09
     64e:	3a 85       	ldd	r19, Y+10	; 0x0a
     650:	4b 85       	ldd	r20, Y+11	; 0x0b
     652:	5c 85       	ldd	r21, Y+12	; 0x0c
     654:	04 c0       	rjmp	.+8      	; 0x65e <__fixsfsi+0x68>
     656:	56 95       	lsr	r21
     658:	47 95       	ror	r20
     65a:	37 95       	ror	r19
     65c:	27 95       	ror	r18
     65e:	8a 95       	dec	r24
     660:	d2 f7       	brpl	.-12     	; 0x656 <__fixsfsi+0x60>
     662:	66 23       	and	r22, r22
     664:	b1 f0       	breq	.+44     	; 0x692 <__fixsfsi+0x9c>
     666:	50 95       	com	r21
     668:	40 95       	com	r20
     66a:	30 95       	com	r19
     66c:	21 95       	neg	r18
     66e:	3f 4f       	sbci	r19, 0xFF	; 255
     670:	4f 4f       	sbci	r20, 0xFF	; 255
     672:	5f 4f       	sbci	r21, 0xFF	; 255
     674:	0e c0       	rjmp	.+28     	; 0x692 <__fixsfsi+0x9c>
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	09 c0       	rjmp	.+18     	; 0x692 <__fixsfsi+0x9c>
     680:	2f ef       	ldi	r18, 0xFF	; 255
     682:	3f ef       	ldi	r19, 0xFF	; 255
     684:	4f ef       	ldi	r20, 0xFF	; 255
     686:	5f e7       	ldi	r21, 0x7F	; 127
     688:	04 c0       	rjmp	.+8      	; 0x692 <__fixsfsi+0x9c>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	40 e0       	ldi	r20, 0x00	; 0
     690:	50 e8       	ldi	r21, 0x80	; 128
     692:	b9 01       	movw	r22, r18
     694:	ca 01       	movw	r24, r20
     696:	2c 96       	adiw	r28, 0x0c	; 12
     698:	e2 e0       	ldi	r30, 0x02	; 2
     69a:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <__epilogue_restores__+0x20>

0000069e <__floatunsisf>:
     69e:	a8 e0       	ldi	r26, 0x08	; 8
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	e5 e5       	ldi	r30, 0x55	; 85
     6a4:	f3 e0       	ldi	r31, 0x03	; 3
     6a6:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <__prologue_saves__+0x10>
     6aa:	7b 01       	movw	r14, r22
     6ac:	8c 01       	movw	r16, r24
     6ae:	61 15       	cp	r22, r1
     6b0:	71 05       	cpc	r23, r1
     6b2:	81 05       	cpc	r24, r1
     6b4:	91 05       	cpc	r25, r1
     6b6:	19 f4       	brne	.+6      	; 0x6be <__floatunsisf+0x20>
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	89 83       	std	Y+1, r24	; 0x01
     6bc:	60 c0       	rjmp	.+192    	; 0x77e <__floatunsisf+0xe0>
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	89 83       	std	Y+1, r24	; 0x01
     6c2:	8e e1       	ldi	r24, 0x1E	; 30
     6c4:	c8 2e       	mov	r12, r24
     6c6:	d1 2c       	mov	r13, r1
     6c8:	dc 82       	std	Y+4, r13	; 0x04
     6ca:	cb 82       	std	Y+3, r12	; 0x03
     6cc:	ed 82       	std	Y+5, r14	; 0x05
     6ce:	fe 82       	std	Y+6, r15	; 0x06
     6d0:	0f 83       	std	Y+7, r16	; 0x07
     6d2:	18 87       	std	Y+8, r17	; 0x08
     6d4:	c8 01       	movw	r24, r16
     6d6:	b7 01       	movw	r22, r14
     6d8:	0e 94 c8 03 	call	0x790	; 0x790 <__clzsi2>
     6dc:	fc 01       	movw	r30, r24
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	f7 ff       	sbrs	r31, 7
     6e2:	3b c0       	rjmp	.+118    	; 0x75a <__floatunsisf+0xbc>
     6e4:	22 27       	eor	r18, r18
     6e6:	33 27       	eor	r19, r19
     6e8:	2e 1b       	sub	r18, r30
     6ea:	3f 0b       	sbc	r19, r31
     6ec:	57 01       	movw	r10, r14
     6ee:	68 01       	movw	r12, r16
     6f0:	02 2e       	mov	r0, r18
     6f2:	04 c0       	rjmp	.+8      	; 0x6fc <__floatunsisf+0x5e>
     6f4:	d6 94       	lsr	r13
     6f6:	c7 94       	ror	r12
     6f8:	b7 94       	ror	r11
     6fa:	a7 94       	ror	r10
     6fc:	0a 94       	dec	r0
     6fe:	d2 f7       	brpl	.-12     	; 0x6f4 <__floatunsisf+0x56>
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	a0 e0       	ldi	r26, 0x00	; 0
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	04 c0       	rjmp	.+8      	; 0x71a <__floatunsisf+0x7c>
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	aa 1f       	adc	r26, r26
     718:	bb 1f       	adc	r27, r27
     71a:	2a 95       	dec	r18
     71c:	d2 f7       	brpl	.-12     	; 0x712 <__floatunsisf+0x74>
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	a1 09       	sbc	r26, r1
     722:	b1 09       	sbc	r27, r1
     724:	8e 21       	and	r24, r14
     726:	9f 21       	and	r25, r15
     728:	a0 23       	and	r26, r16
     72a:	b1 23       	and	r27, r17
     72c:	00 97       	sbiw	r24, 0x00	; 0
     72e:	a1 05       	cpc	r26, r1
     730:	b1 05       	cpc	r27, r1
     732:	21 f0       	breq	.+8      	; 0x73c <__floatunsisf+0x9e>
     734:	41 e0       	ldi	r20, 0x01	; 1
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	4a 29       	or	r20, r10
     73e:	5b 29       	or	r21, r11
     740:	6c 29       	or	r22, r12
     742:	7d 29       	or	r23, r13
     744:	4d 83       	std	Y+5, r20	; 0x05
     746:	5e 83       	std	Y+6, r21	; 0x06
     748:	6f 83       	std	Y+7, r22	; 0x07
     74a:	78 87       	std	Y+8, r23	; 0x08
     74c:	8e e1       	ldi	r24, 0x1E	; 30
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	8e 1b       	sub	r24, r30
     752:	9f 0b       	sbc	r25, r31
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	8b 83       	std	Y+3, r24	; 0x03
     758:	12 c0       	rjmp	.+36     	; 0x77e <__floatunsisf+0xe0>
     75a:	30 97       	sbiw	r30, 0x00	; 0
     75c:	81 f0       	breq	.+32     	; 0x77e <__floatunsisf+0xe0>
     75e:	0e 2e       	mov	r0, r30
     760:	04 c0       	rjmp	.+8      	; 0x76a <__floatunsisf+0xcc>
     762:	ee 0c       	add	r14, r14
     764:	ff 1c       	adc	r15, r15
     766:	00 1f       	adc	r16, r16
     768:	11 1f       	adc	r17, r17
     76a:	0a 94       	dec	r0
     76c:	d2 f7       	brpl	.-12     	; 0x762 <__floatunsisf+0xc4>
     76e:	ed 82       	std	Y+5, r14	; 0x05
     770:	fe 82       	std	Y+6, r15	; 0x06
     772:	0f 83       	std	Y+7, r16	; 0x07
     774:	18 87       	std	Y+8, r17	; 0x08
     776:	ce 1a       	sub	r12, r30
     778:	df 0a       	sbc	r13, r31
     77a:	dc 82       	std	Y+4, r13	; 0x04
     77c:	cb 82       	std	Y+3, r12	; 0x03
     77e:	1a 82       	std	Y+2, r1	; 0x02
     780:	ce 01       	movw	r24, r28
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     788:	28 96       	adiw	r28, 0x08	; 8
     78a:	ea e0       	ldi	r30, 0x0A	; 10
     78c:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <__epilogue_restores__+0x10>

00000790 <__clzsi2>:
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	7b 01       	movw	r14, r22
     79a:	8c 01       	movw	r16, r24
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	e8 16       	cp	r14, r24
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	f8 06       	cpc	r15, r24
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	08 07       	cpc	r16, r24
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	18 07       	cpc	r17, r24
     7ac:	88 f4       	brcc	.+34     	; 0x7d0 <__clzsi2+0x40>
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	e8 16       	cp	r14, r24
     7b2:	f1 04       	cpc	r15, r1
     7b4:	01 05       	cpc	r16, r1
     7b6:	11 05       	cpc	r17, r1
     7b8:	31 f0       	breq	.+12     	; 0x7c6 <__clzsi2+0x36>
     7ba:	28 f0       	brcs	.+10     	; 0x7c6 <__clzsi2+0x36>
     7bc:	88 e0       	ldi	r24, 0x08	; 8
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	a0 e0       	ldi	r26, 0x00	; 0
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	17 c0       	rjmp	.+46     	; 0x7f4 <__clzsi2+0x64>
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	a0 e0       	ldi	r26, 0x00	; 0
     7cc:	b0 e0       	ldi	r27, 0x00	; 0
     7ce:	12 c0       	rjmp	.+36     	; 0x7f4 <__clzsi2+0x64>
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	e8 16       	cp	r14, r24
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	f8 06       	cpc	r15, r24
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	08 07       	cpc	r16, r24
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	18 07       	cpc	r17, r24
     7e0:	28 f0       	brcs	.+10     	; 0x7ec <__clzsi2+0x5c>
     7e2:	88 e1       	ldi	r24, 0x18	; 24
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	a0 e0       	ldi	r26, 0x00	; 0
     7e8:	b0 e0       	ldi	r27, 0x00	; 0
     7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <__clzsi2+0x64>
     7ec:	80 e1       	ldi	r24, 0x10	; 16
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	a0 e0       	ldi	r26, 0x00	; 0
     7f2:	b0 e0       	ldi	r27, 0x00	; 0
     7f4:	20 e2       	ldi	r18, 0x20	; 32
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	28 1b       	sub	r18, r24
     7fe:	39 0b       	sbc	r19, r25
     800:	4a 0b       	sbc	r20, r26
     802:	5b 0b       	sbc	r21, r27
     804:	04 c0       	rjmp	.+8      	; 0x80e <__clzsi2+0x7e>
     806:	16 95       	lsr	r17
     808:	07 95       	ror	r16
     80a:	f7 94       	ror	r15
     80c:	e7 94       	ror	r14
     80e:	8a 95       	dec	r24
     810:	d2 f7       	brpl	.-12     	; 0x806 <__clzsi2+0x76>
     812:	f7 01       	movw	r30, r14
     814:	e8 59       	subi	r30, 0x98	; 152
     816:	ff 4f       	sbci	r31, 0xFF	; 255
     818:	80 81       	ld	r24, Z
     81a:	28 1b       	sub	r18, r24
     81c:	31 09       	sbc	r19, r1
     81e:	41 09       	sbc	r20, r1
     820:	51 09       	sbc	r21, r1
     822:	c9 01       	movw	r24, r18
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	08 95       	ret

0000082e <__pack_f>:
     82e:	df 92       	push	r13
     830:	ef 92       	push	r14
     832:	ff 92       	push	r15
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	fc 01       	movw	r30, r24
     83a:	e4 80       	ldd	r14, Z+4	; 0x04
     83c:	f5 80       	ldd	r15, Z+5	; 0x05
     83e:	06 81       	ldd	r16, Z+6	; 0x06
     840:	17 81       	ldd	r17, Z+7	; 0x07
     842:	d1 80       	ldd	r13, Z+1	; 0x01
     844:	80 81       	ld	r24, Z
     846:	82 30       	cpi	r24, 0x02	; 2
     848:	48 f4       	brcc	.+18     	; 0x85c <__pack_f+0x2e>
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	a0 e1       	ldi	r26, 0x10	; 16
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	e8 2a       	or	r14, r24
     854:	f9 2a       	or	r15, r25
     856:	0a 2b       	or	r16, r26
     858:	1b 2b       	or	r17, r27
     85a:	a5 c0       	rjmp	.+330    	; 0x9a6 <__stack+0x147>
     85c:	84 30       	cpi	r24, 0x04	; 4
     85e:	09 f4       	brne	.+2      	; 0x862 <__stack+0x3>
     860:	9f c0       	rjmp	.+318    	; 0x9a0 <__stack+0x141>
     862:	82 30       	cpi	r24, 0x02	; 2
     864:	21 f4       	brne	.+8      	; 0x86e <__stack+0xf>
     866:	ee 24       	eor	r14, r14
     868:	ff 24       	eor	r15, r15
     86a:	87 01       	movw	r16, r14
     86c:	05 c0       	rjmp	.+10     	; 0x878 <__stack+0x19>
     86e:	e1 14       	cp	r14, r1
     870:	f1 04       	cpc	r15, r1
     872:	01 05       	cpc	r16, r1
     874:	11 05       	cpc	r17, r1
     876:	19 f4       	brne	.+6      	; 0x87e <__stack+0x1f>
     878:	e0 e0       	ldi	r30, 0x00	; 0
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	96 c0       	rjmp	.+300    	; 0x9aa <__stack+0x14b>
     87e:	62 81       	ldd	r22, Z+2	; 0x02
     880:	73 81       	ldd	r23, Z+3	; 0x03
     882:	9f ef       	ldi	r25, 0xFF	; 255
     884:	62 38       	cpi	r22, 0x82	; 130
     886:	79 07       	cpc	r23, r25
     888:	0c f0       	brlt	.+2      	; 0x88c <__stack+0x2d>
     88a:	5b c0       	rjmp	.+182    	; 0x942 <__stack+0xe3>
     88c:	22 e8       	ldi	r18, 0x82	; 130
     88e:	3f ef       	ldi	r19, 0xFF	; 255
     890:	26 1b       	sub	r18, r22
     892:	37 0b       	sbc	r19, r23
     894:	2a 31       	cpi	r18, 0x1A	; 26
     896:	31 05       	cpc	r19, r1
     898:	2c f0       	brlt	.+10     	; 0x8a4 <__stack+0x45>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	2a c0       	rjmp	.+84     	; 0x8f8 <__stack+0x99>
     8a4:	b8 01       	movw	r22, r16
     8a6:	a7 01       	movw	r20, r14
     8a8:	02 2e       	mov	r0, r18
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__stack+0x55>
     8ac:	76 95       	lsr	r23
     8ae:	67 95       	ror	r22
     8b0:	57 95       	ror	r21
     8b2:	47 95       	ror	r20
     8b4:	0a 94       	dec	r0
     8b6:	d2 f7       	brpl	.-12     	; 0x8ac <__stack+0x4d>
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	a0 e0       	ldi	r26, 0x00	; 0
     8be:	b0 e0       	ldi	r27, 0x00	; 0
     8c0:	04 c0       	rjmp	.+8      	; 0x8ca <__stack+0x6b>
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	aa 1f       	adc	r26, r26
     8c8:	bb 1f       	adc	r27, r27
     8ca:	2a 95       	dec	r18
     8cc:	d2 f7       	brpl	.-12     	; 0x8c2 <__stack+0x63>
     8ce:	01 97       	sbiw	r24, 0x01	; 1
     8d0:	a1 09       	sbc	r26, r1
     8d2:	b1 09       	sbc	r27, r1
     8d4:	8e 21       	and	r24, r14
     8d6:	9f 21       	and	r25, r15
     8d8:	a0 23       	and	r26, r16
     8da:	b1 23       	and	r27, r17
     8dc:	00 97       	sbiw	r24, 0x00	; 0
     8de:	a1 05       	cpc	r26, r1
     8e0:	b1 05       	cpc	r27, r1
     8e2:	21 f0       	breq	.+8      	; 0x8ec <__stack+0x8d>
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	a0 e0       	ldi	r26, 0x00	; 0
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	9a 01       	movw	r18, r20
     8ee:	ab 01       	movw	r20, r22
     8f0:	28 2b       	or	r18, r24
     8f2:	39 2b       	or	r19, r25
     8f4:	4a 2b       	or	r20, r26
     8f6:	5b 2b       	or	r21, r27
     8f8:	da 01       	movw	r26, r20
     8fa:	c9 01       	movw	r24, r18
     8fc:	8f 77       	andi	r24, 0x7F	; 127
     8fe:	90 70       	andi	r25, 0x00	; 0
     900:	a0 70       	andi	r26, 0x00	; 0
     902:	b0 70       	andi	r27, 0x00	; 0
     904:	80 34       	cpi	r24, 0x40	; 64
     906:	91 05       	cpc	r25, r1
     908:	a1 05       	cpc	r26, r1
     90a:	b1 05       	cpc	r27, r1
     90c:	39 f4       	brne	.+14     	; 0x91c <__stack+0xbd>
     90e:	27 ff       	sbrs	r18, 7
     910:	09 c0       	rjmp	.+18     	; 0x924 <__stack+0xc5>
     912:	20 5c       	subi	r18, 0xC0	; 192
     914:	3f 4f       	sbci	r19, 0xFF	; 255
     916:	4f 4f       	sbci	r20, 0xFF	; 255
     918:	5f 4f       	sbci	r21, 0xFF	; 255
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__stack+0xc5>
     91c:	21 5c       	subi	r18, 0xC1	; 193
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	e0 e0       	ldi	r30, 0x00	; 0
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	20 30       	cpi	r18, 0x00	; 0
     92a:	a0 e0       	ldi	r26, 0x00	; 0
     92c:	3a 07       	cpc	r19, r26
     92e:	a0 e0       	ldi	r26, 0x00	; 0
     930:	4a 07       	cpc	r20, r26
     932:	a0 e4       	ldi	r26, 0x40	; 64
     934:	5a 07       	cpc	r21, r26
     936:	10 f0       	brcs	.+4      	; 0x93c <__stack+0xdd>
     938:	e1 e0       	ldi	r30, 0x01	; 1
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	79 01       	movw	r14, r18
     93e:	8a 01       	movw	r16, r20
     940:	27 c0       	rjmp	.+78     	; 0x990 <__stack+0x131>
     942:	60 38       	cpi	r22, 0x80	; 128
     944:	71 05       	cpc	r23, r1
     946:	64 f5       	brge	.+88     	; 0x9a0 <__stack+0x141>
     948:	fb 01       	movw	r30, r22
     94a:	e1 58       	subi	r30, 0x81	; 129
     94c:	ff 4f       	sbci	r31, 0xFF	; 255
     94e:	d8 01       	movw	r26, r16
     950:	c7 01       	movw	r24, r14
     952:	8f 77       	andi	r24, 0x7F	; 127
     954:	90 70       	andi	r25, 0x00	; 0
     956:	a0 70       	andi	r26, 0x00	; 0
     958:	b0 70       	andi	r27, 0x00	; 0
     95a:	80 34       	cpi	r24, 0x40	; 64
     95c:	91 05       	cpc	r25, r1
     95e:	a1 05       	cpc	r26, r1
     960:	b1 05       	cpc	r27, r1
     962:	39 f4       	brne	.+14     	; 0x972 <__stack+0x113>
     964:	e7 fe       	sbrs	r14, 7
     966:	0d c0       	rjmp	.+26     	; 0x982 <__stack+0x123>
     968:	80 e4       	ldi	r24, 0x40	; 64
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	04 c0       	rjmp	.+8      	; 0x97a <__stack+0x11b>
     972:	8f e3       	ldi	r24, 0x3F	; 63
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	a0 e0       	ldi	r26, 0x00	; 0
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	e8 0e       	add	r14, r24
     97c:	f9 1e       	adc	r15, r25
     97e:	0a 1f       	adc	r16, r26
     980:	1b 1f       	adc	r17, r27
     982:	17 ff       	sbrs	r17, 7
     984:	05 c0       	rjmp	.+10     	; 0x990 <__stack+0x131>
     986:	16 95       	lsr	r17
     988:	07 95       	ror	r16
     98a:	f7 94       	ror	r15
     98c:	e7 94       	ror	r14
     98e:	31 96       	adiw	r30, 0x01	; 1
     990:	87 e0       	ldi	r24, 0x07	; 7
     992:	16 95       	lsr	r17
     994:	07 95       	ror	r16
     996:	f7 94       	ror	r15
     998:	e7 94       	ror	r14
     99a:	8a 95       	dec	r24
     99c:	d1 f7       	brne	.-12     	; 0x992 <__stack+0x133>
     99e:	05 c0       	rjmp	.+10     	; 0x9aa <__stack+0x14b>
     9a0:	ee 24       	eor	r14, r14
     9a2:	ff 24       	eor	r15, r15
     9a4:	87 01       	movw	r16, r14
     9a6:	ef ef       	ldi	r30, 0xFF	; 255
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	6e 2f       	mov	r22, r30
     9ac:	67 95       	ror	r22
     9ae:	66 27       	eor	r22, r22
     9b0:	67 95       	ror	r22
     9b2:	90 2f       	mov	r25, r16
     9b4:	9f 77       	andi	r25, 0x7F	; 127
     9b6:	d7 94       	ror	r13
     9b8:	dd 24       	eor	r13, r13
     9ba:	d7 94       	ror	r13
     9bc:	8e 2f       	mov	r24, r30
     9be:	86 95       	lsr	r24
     9c0:	49 2f       	mov	r20, r25
     9c2:	46 2b       	or	r20, r22
     9c4:	58 2f       	mov	r21, r24
     9c6:	5d 29       	or	r21, r13
     9c8:	b7 01       	movw	r22, r14
     9ca:	ca 01       	movw	r24, r20
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	df 90       	pop	r13
     9d6:	08 95       	ret

000009d8 <__unpack_f>:
     9d8:	fc 01       	movw	r30, r24
     9da:	db 01       	movw	r26, r22
     9dc:	40 81       	ld	r20, Z
     9de:	51 81       	ldd	r21, Z+1	; 0x01
     9e0:	22 81       	ldd	r18, Z+2	; 0x02
     9e2:	62 2f       	mov	r22, r18
     9e4:	6f 77       	andi	r22, 0x7F	; 127
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	22 1f       	adc	r18, r18
     9ea:	22 27       	eor	r18, r18
     9ec:	22 1f       	adc	r18, r18
     9ee:	93 81       	ldd	r25, Z+3	; 0x03
     9f0:	89 2f       	mov	r24, r25
     9f2:	88 0f       	add	r24, r24
     9f4:	82 2b       	or	r24, r18
     9f6:	28 2f       	mov	r18, r24
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	99 1f       	adc	r25, r25
     9fc:	99 27       	eor	r25, r25
     9fe:	99 1f       	adc	r25, r25
     a00:	11 96       	adiw	r26, 0x01	; 1
     a02:	9c 93       	st	X, r25
     a04:	11 97       	sbiw	r26, 0x01	; 1
     a06:	21 15       	cp	r18, r1
     a08:	31 05       	cpc	r19, r1
     a0a:	a9 f5       	brne	.+106    	; 0xa76 <__unpack_f+0x9e>
     a0c:	41 15       	cp	r20, r1
     a0e:	51 05       	cpc	r21, r1
     a10:	61 05       	cpc	r22, r1
     a12:	71 05       	cpc	r23, r1
     a14:	11 f4       	brne	.+4      	; 0xa1a <__unpack_f+0x42>
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	37 c0       	rjmp	.+110    	; 0xa88 <__unpack_f+0xb0>
     a1a:	82 e8       	ldi	r24, 0x82	; 130
     a1c:	9f ef       	ldi	r25, 0xFF	; 255
     a1e:	13 96       	adiw	r26, 0x03	; 3
     a20:	9c 93       	st	X, r25
     a22:	8e 93       	st	-X, r24
     a24:	12 97       	sbiw	r26, 0x02	; 2
     a26:	9a 01       	movw	r18, r20
     a28:	ab 01       	movw	r20, r22
     a2a:	67 e0       	ldi	r22, 0x07	; 7
     a2c:	22 0f       	add	r18, r18
     a2e:	33 1f       	adc	r19, r19
     a30:	44 1f       	adc	r20, r20
     a32:	55 1f       	adc	r21, r21
     a34:	6a 95       	dec	r22
     a36:	d1 f7       	brne	.-12     	; 0xa2c <__unpack_f+0x54>
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	8c 93       	st	X, r24
     a3c:	0d c0       	rjmp	.+26     	; 0xa58 <__unpack_f+0x80>
     a3e:	22 0f       	add	r18, r18
     a40:	33 1f       	adc	r19, r19
     a42:	44 1f       	adc	r20, r20
     a44:	55 1f       	adc	r21, r21
     a46:	12 96       	adiw	r26, 0x02	; 2
     a48:	8d 91       	ld	r24, X+
     a4a:	9c 91       	ld	r25, X
     a4c:	13 97       	sbiw	r26, 0x03	; 3
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	13 96       	adiw	r26, 0x03	; 3
     a52:	9c 93       	st	X, r25
     a54:	8e 93       	st	-X, r24
     a56:	12 97       	sbiw	r26, 0x02	; 2
     a58:	20 30       	cpi	r18, 0x00	; 0
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	38 07       	cpc	r19, r24
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	48 07       	cpc	r20, r24
     a62:	80 e4       	ldi	r24, 0x40	; 64
     a64:	58 07       	cpc	r21, r24
     a66:	58 f3       	brcs	.-42     	; 0xa3e <__unpack_f+0x66>
     a68:	14 96       	adiw	r26, 0x04	; 4
     a6a:	2d 93       	st	X+, r18
     a6c:	3d 93       	st	X+, r19
     a6e:	4d 93       	st	X+, r20
     a70:	5c 93       	st	X, r21
     a72:	17 97       	sbiw	r26, 0x07	; 7
     a74:	08 95       	ret
     a76:	2f 3f       	cpi	r18, 0xFF	; 255
     a78:	31 05       	cpc	r19, r1
     a7a:	79 f4       	brne	.+30     	; 0xa9a <__unpack_f+0xc2>
     a7c:	41 15       	cp	r20, r1
     a7e:	51 05       	cpc	r21, r1
     a80:	61 05       	cpc	r22, r1
     a82:	71 05       	cpc	r23, r1
     a84:	19 f4       	brne	.+6      	; 0xa8c <__unpack_f+0xb4>
     a86:	84 e0       	ldi	r24, 0x04	; 4
     a88:	8c 93       	st	X, r24
     a8a:	08 95       	ret
     a8c:	64 ff       	sbrs	r22, 4
     a8e:	03 c0       	rjmp	.+6      	; 0xa96 <__unpack_f+0xbe>
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	8c 93       	st	X, r24
     a94:	12 c0       	rjmp	.+36     	; 0xaba <__unpack_f+0xe2>
     a96:	1c 92       	st	X, r1
     a98:	10 c0       	rjmp	.+32     	; 0xaba <__unpack_f+0xe2>
     a9a:	2f 57       	subi	r18, 0x7F	; 127
     a9c:	30 40       	sbci	r19, 0x00	; 0
     a9e:	13 96       	adiw	r26, 0x03	; 3
     aa0:	3c 93       	st	X, r19
     aa2:	2e 93       	st	-X, r18
     aa4:	12 97       	sbiw	r26, 0x02	; 2
     aa6:	83 e0       	ldi	r24, 0x03	; 3
     aa8:	8c 93       	st	X, r24
     aaa:	87 e0       	ldi	r24, 0x07	; 7
     aac:	44 0f       	add	r20, r20
     aae:	55 1f       	adc	r21, r21
     ab0:	66 1f       	adc	r22, r22
     ab2:	77 1f       	adc	r23, r23
     ab4:	8a 95       	dec	r24
     ab6:	d1 f7       	brne	.-12     	; 0xaac <__unpack_f+0xd4>
     ab8:	70 64       	ori	r23, 0x40	; 64
     aba:	14 96       	adiw	r26, 0x04	; 4
     abc:	4d 93       	st	X+, r20
     abe:	5d 93       	st	X+, r21
     ac0:	6d 93       	st	X+, r22
     ac2:	7c 93       	st	X, r23
     ac4:	17 97       	sbiw	r26, 0x07	; 7
     ac6:	08 95       	ret

00000ac8 <__fpcmp_parts_f>:
     ac8:	1f 93       	push	r17
     aca:	dc 01       	movw	r26, r24
     acc:	fb 01       	movw	r30, r22
     ace:	9c 91       	ld	r25, X
     ad0:	92 30       	cpi	r25, 0x02	; 2
     ad2:	08 f4       	brcc	.+2      	; 0xad6 <__fpcmp_parts_f+0xe>
     ad4:	47 c0       	rjmp	.+142    	; 0xb64 <__fpcmp_parts_f+0x9c>
     ad6:	80 81       	ld	r24, Z
     ad8:	82 30       	cpi	r24, 0x02	; 2
     ada:	08 f4       	brcc	.+2      	; 0xade <__fpcmp_parts_f+0x16>
     adc:	43 c0       	rjmp	.+134    	; 0xb64 <__fpcmp_parts_f+0x9c>
     ade:	94 30       	cpi	r25, 0x04	; 4
     ae0:	51 f4       	brne	.+20     	; 0xaf6 <__fpcmp_parts_f+0x2e>
     ae2:	11 96       	adiw	r26, 0x01	; 1
     ae4:	1c 91       	ld	r17, X
     ae6:	84 30       	cpi	r24, 0x04	; 4
     ae8:	99 f5       	brne	.+102    	; 0xb50 <__fpcmp_parts_f+0x88>
     aea:	81 81       	ldd	r24, Z+1	; 0x01
     aec:	68 2f       	mov	r22, r24
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	61 1b       	sub	r22, r17
     af2:	71 09       	sbc	r23, r1
     af4:	3f c0       	rjmp	.+126    	; 0xb74 <__fpcmp_parts_f+0xac>
     af6:	84 30       	cpi	r24, 0x04	; 4
     af8:	21 f0       	breq	.+8      	; 0xb02 <__fpcmp_parts_f+0x3a>
     afa:	92 30       	cpi	r25, 0x02	; 2
     afc:	31 f4       	brne	.+12     	; 0xb0a <__fpcmp_parts_f+0x42>
     afe:	82 30       	cpi	r24, 0x02	; 2
     b00:	b9 f1       	breq	.+110    	; 0xb70 <__fpcmp_parts_f+0xa8>
     b02:	81 81       	ldd	r24, Z+1	; 0x01
     b04:	88 23       	and	r24, r24
     b06:	89 f1       	breq	.+98     	; 0xb6a <__fpcmp_parts_f+0xa2>
     b08:	2d c0       	rjmp	.+90     	; 0xb64 <__fpcmp_parts_f+0x9c>
     b0a:	11 96       	adiw	r26, 0x01	; 1
     b0c:	1c 91       	ld	r17, X
     b0e:	11 97       	sbiw	r26, 0x01	; 1
     b10:	82 30       	cpi	r24, 0x02	; 2
     b12:	f1 f0       	breq	.+60     	; 0xb50 <__fpcmp_parts_f+0x88>
     b14:	81 81       	ldd	r24, Z+1	; 0x01
     b16:	18 17       	cp	r17, r24
     b18:	d9 f4       	brne	.+54     	; 0xb50 <__fpcmp_parts_f+0x88>
     b1a:	12 96       	adiw	r26, 0x02	; 2
     b1c:	2d 91       	ld	r18, X+
     b1e:	3c 91       	ld	r19, X
     b20:	13 97       	sbiw	r26, 0x03	; 3
     b22:	82 81       	ldd	r24, Z+2	; 0x02
     b24:	93 81       	ldd	r25, Z+3	; 0x03
     b26:	82 17       	cp	r24, r18
     b28:	93 07       	cpc	r25, r19
     b2a:	94 f0       	brlt	.+36     	; 0xb50 <__fpcmp_parts_f+0x88>
     b2c:	28 17       	cp	r18, r24
     b2e:	39 07       	cpc	r19, r25
     b30:	bc f0       	brlt	.+46     	; 0xb60 <__fpcmp_parts_f+0x98>
     b32:	14 96       	adiw	r26, 0x04	; 4
     b34:	8d 91       	ld	r24, X+
     b36:	9d 91       	ld	r25, X+
     b38:	0d 90       	ld	r0, X+
     b3a:	bc 91       	ld	r27, X
     b3c:	a0 2d       	mov	r26, r0
     b3e:	24 81       	ldd	r18, Z+4	; 0x04
     b40:	35 81       	ldd	r19, Z+5	; 0x05
     b42:	46 81       	ldd	r20, Z+6	; 0x06
     b44:	57 81       	ldd	r21, Z+7	; 0x07
     b46:	28 17       	cp	r18, r24
     b48:	39 07       	cpc	r19, r25
     b4a:	4a 07       	cpc	r20, r26
     b4c:	5b 07       	cpc	r21, r27
     b4e:	18 f4       	brcc	.+6      	; 0xb56 <__fpcmp_parts_f+0x8e>
     b50:	11 23       	and	r17, r17
     b52:	41 f0       	breq	.+16     	; 0xb64 <__fpcmp_parts_f+0x9c>
     b54:	0a c0       	rjmp	.+20     	; 0xb6a <__fpcmp_parts_f+0xa2>
     b56:	82 17       	cp	r24, r18
     b58:	93 07       	cpc	r25, r19
     b5a:	a4 07       	cpc	r26, r20
     b5c:	b5 07       	cpc	r27, r21
     b5e:	40 f4       	brcc	.+16     	; 0xb70 <__fpcmp_parts_f+0xa8>
     b60:	11 23       	and	r17, r17
     b62:	19 f0       	breq	.+6      	; 0xb6a <__fpcmp_parts_f+0xa2>
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	05 c0       	rjmp	.+10     	; 0xb74 <__fpcmp_parts_f+0xac>
     b6a:	6f ef       	ldi	r22, 0xFF	; 255
     b6c:	7f ef       	ldi	r23, 0xFF	; 255
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <__fpcmp_parts_f+0xac>
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	cb 01       	movw	r24, r22
     b76:	1f 91       	pop	r17
     b78:	08 95       	ret

00000b7a <enuTimer0_init>:

/*************************************************************************************************************
 * 							Function Implementation
 ************************************************************************************************************/
enu_timerStatus_t enuTimer0_init (enu_timerMode_t enTimerMode)
{
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	00 d0       	rcall	.+0      	; 0xb80 <enuTimer0_init+0x6>
     b80:	00 d0       	rcall	.+0      	; 0xb82 <enuTimer0_init+0x8>
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	8a 83       	std	Y+2, r24	; 0x02
	enu_timerStatus_t errorStatus = TIMER_OK;
     b88:	19 82       	std	Y+1, r1	; 0x01

	if(enTimerMode < TIMER_MODE_INVALID)
     b8a:	8a 81       	ldd	r24, Y+2	; 0x02
     b8c:	84 30       	cpi	r24, 0x04	; 4
     b8e:	08 f0       	brcs	.+2      	; 0xb92 <enuTimer0_init+0x18>
     b90:	5e c0       	rjmp	.+188    	; 0xc4e <enuTimer0_init+0xd4>
	{
		switch (enTimerMode)
     b92:	8a 81       	ldd	r24, Y+2	; 0x02
     b94:	28 2f       	mov	r18, r24
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	3c 83       	std	Y+4, r19	; 0x04
     b9a:	2b 83       	std	Y+3, r18	; 0x03
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	91 05       	cpc	r25, r1
     ba4:	21 f1       	breq	.+72     	; 0xbee <enuTimer0_init+0x74>
     ba6:	2b 81       	ldd	r18, Y+3	; 0x03
     ba8:	3c 81       	ldd	r19, Y+4	; 0x04
     baa:	22 30       	cpi	r18, 0x02	; 2
     bac:	31 05       	cpc	r19, r1
     bae:	2c f4       	brge	.+10     	; 0xbba <enuTimer0_init+0x40>
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	9c 81       	ldd	r25, Y+4	; 0x04
     bb4:	00 97       	sbiw	r24, 0x00	; 0
     bb6:	61 f0       	breq	.+24     	; 0xbd0 <enuTimer0_init+0x56>
     bb8:	47 c0       	rjmp	.+142    	; 0xc48 <enuTimer0_init+0xce>
     bba:	2b 81       	ldd	r18, Y+3	; 0x03
     bbc:	3c 81       	ldd	r19, Y+4	; 0x04
     bbe:	22 30       	cpi	r18, 0x02	; 2
     bc0:	31 05       	cpc	r19, r1
     bc2:	21 f1       	breq	.+72     	; 0xc0c <enuTimer0_init+0x92>
     bc4:	8b 81       	ldd	r24, Y+3	; 0x03
     bc6:	9c 81       	ldd	r25, Y+4	; 0x04
     bc8:	83 30       	cpi	r24, 0x03	; 3
     bca:	91 05       	cpc	r25, r1
     bcc:	71 f1       	breq	.+92     	; 0xc2a <enuTimer0_init+0xb0>
     bce:	3c c0       	rjmp	.+120    	; 0xc48 <enuTimer0_init+0xce>
		{
		case OVF_MODE 				: ClrBit(TCCR0_REG, WGM01);ClrBit(TCCR0_REG, WGM00); break;
     bd0:	a3 e5       	ldi	r26, 0x53	; 83
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e3 e5       	ldi	r30, 0x53	; 83
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	87 7f       	andi	r24, 0xF7	; 247
     bdc:	8c 93       	st	X, r24
     bde:	a3 e5       	ldi	r26, 0x53	; 83
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e3 e5       	ldi	r30, 0x53	; 83
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	8f 7b       	andi	r24, 0xBF	; 191
     bea:	8c 93       	st	X, r24
     bec:	32 c0       	rjmp	.+100    	; 0xc52 <enuTimer0_init+0xd8>
		case PHASE_CORRECT_PWM_MODE : ClrBit(TCCR0_REG, WGM01);SetBit(TCCR0_REG, WGM00); break;
     bee:	a3 e5       	ldi	r26, 0x53	; 83
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e3 e5       	ldi	r30, 0x53	; 83
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	87 7f       	andi	r24, 0xF7	; 247
     bfa:	8c 93       	st	X, r24
     bfc:	a3 e5       	ldi	r26, 0x53	; 83
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e3 e5       	ldi	r30, 0x53	; 83
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	80 64       	ori	r24, 0x40	; 64
     c08:	8c 93       	st	X, r24
     c0a:	23 c0       	rjmp	.+70     	; 0xc52 <enuTimer0_init+0xd8>
		case CTC_MODE 				: SetBit(TCCR0_REG, WGM01);ClrBit(TCCR0_REG, WGM00); break;
     c0c:	a3 e5       	ldi	r26, 0x53	; 83
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e3 e5       	ldi	r30, 0x53	; 83
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	88 60       	ori	r24, 0x08	; 8
     c18:	8c 93       	st	X, r24
     c1a:	a3 e5       	ldi	r26, 0x53	; 83
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e3 e5       	ldi	r30, 0x53	; 83
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	8f 7b       	andi	r24, 0xBF	; 191
     c26:	8c 93       	st	X, r24
     c28:	14 c0       	rjmp	.+40     	; 0xc52 <enuTimer0_init+0xd8>
		case FAST_PWM_MODE 			: SetBit(TCCR0_REG, WGM01);SetBit(TCCR0_REG, WGM00); break;
     c2a:	a3 e5       	ldi	r26, 0x53	; 83
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e3 e5       	ldi	r30, 0x53	; 83
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	88 60       	ori	r24, 0x08	; 8
     c36:	8c 93       	st	X, r24
     c38:	a3 e5       	ldi	r26, 0x53	; 83
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	e3 e5       	ldi	r30, 0x53	; 83
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	80 64       	ori	r24, 0x40	; 64
     c44:	8c 93       	st	X, r24
     c46:	05 c0       	rjmp	.+10     	; 0xc52 <enuTimer0_init+0xd8>
		default 					: errorStatus = TIMER_NOK; break;
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	89 83       	std	Y+1, r24	; 0x01
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <enuTimer0_init+0xd8>
		}
	}
	else
	{
		errorStatus = TIMER_NOK;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	89 83       	std	Y+1, r24	; 0x01
	}
	return errorStatus;
     c52:	89 81       	ldd	r24, Y+1	; 0x01
}
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	08 95       	ret

00000c62 <u8Timer0_setPrescallar>:


/*************************************************************************************************************/
enu_timerStatus_t u8Timer0_setPrescallar(enu_timerPrescalar_t Copy_enPrescal)
{
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	00 d0       	rcall	.+0      	; 0xc68 <u8Timer0_setPrescallar+0x6>
     c68:	0f 92       	push	r0
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	8b 83       	std	Y+3, r24	; 0x03
	enu_timerStatus_t errorStatus = TIMER_OK;
     c70:	1a 82       	std	Y+2, r1	; 0x02
	Uint8_t temp_reg;
	if(Copy_enPrescal < TIMER_PRESCALR_INVALID)
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	88 30       	cpi	r24, 0x08	; 8
     c76:	e0 f4       	brcc	.+56     	; 0xcb0 <u8Timer0_setPrescallar+0x4e>
	{
		global_prescaller = Copy_enPrescal;
     c78:	8b 81       	ldd	r24, Y+3	; 0x03
     c7a:	80 93 97 01 	sts	0x0197, r24
		if (global_timerStatus == RUNNING)
     c7e:	80 91 98 01 	lds	r24, 0x0198
     c82:	81 30       	cpi	r24, 0x01	; 1
     c84:	b9 f4       	brne	.+46     	; 0xcb4 <u8Timer0_setPrescallar+0x52>
		{
			temp_reg = TCCR0_REG;		 // read
     c86:	e3 e5       	ldi	r30, 0x53	; 83
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	89 83       	std	Y+1, r24	; 0x01
			temp_reg &= PRESCALLER_CLR_MSK;  // mod
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	88 7f       	andi	r24, 0xF8	; 248
     c92:	89 83       	std	Y+1, r24	; 0x01
			temp_reg |=  global_prescaller << PRESCALLER_OFFSET; // mod
     c94:	90 91 97 01 	lds	r25, 0x0197
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	89 2b       	or	r24, r25
     c9c:	89 83       	std	Y+1, r24	; 0x01
			TCCR0_REG |= temp_reg;		// write
     c9e:	a3 e5       	ldi	r26, 0x53	; 83
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e3 e5       	ldi	r30, 0x53	; 83
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	90 81       	ld	r25, Z
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	89 2b       	or	r24, r25
     cac:	8c 93       	st	X, r24
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <u8Timer0_setPrescallar+0x52>
			/* do nothing */
		}
	}
	else
	{
		errorStatus = TIMER_NOK;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	8a 83       	std	Y+2, r24	; 0x02
	}


	return errorStatus;
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02

}
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <vidTimer0_OvfIrqEnable>:

/*************************************************************************************************************/
enu_timerStatus_t vidTimer0_OvfIrqEnable(void)
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	0f 92       	push	r0
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
	enu_timerStatus_t errorStatus = TIMER_OK;
     ccc:	19 82       	std	Y+1, r1	; 0x01

	SetBit(TIMSK_REG, TOIE0);
     cce:	a9 e5       	ldi	r26, 0x59	; 89
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e9 e5       	ldi	r30, 0x59	; 89
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	81 60       	ori	r24, 0x01	; 1
     cda:	8c 93       	st	X, r24
	SetBit(SREG_REG, 7);
     cdc:	af e5       	ldi	r26, 0x5F	; 95
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	ef e5       	ldi	r30, 0x5F	; 95
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	80 68       	ori	r24, 0x80	; 128
     ce8:	8c 93       	st	X, r24

	return errorStatus;
     cea:	89 81       	ldd	r24, Y+1	; 0x01

}
     cec:	0f 90       	pop	r0
     cee:	cf 91       	pop	r28
     cf0:	df 91       	pop	r29
     cf2:	08 95       	ret

00000cf4 <vidTimer0_OvfIrqDisable>:

/*************************************************************************************************************/
enu_timerStatus_t vidTimer0_OvfIrqDisable(void)
{
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	0f 92       	push	r0
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
	enu_timerStatus_t errorStatus = TIMER_OK;
     cfe:	19 82       	std	Y+1, r1	; 0x01

	ClrBit(TIMSK_REG, TOIE0);
     d00:	a9 e5       	ldi	r26, 0x59	; 89
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e9 e5       	ldi	r30, 0x59	; 89
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	8e 7f       	andi	r24, 0xFE	; 254
     d0c:	8c 93       	st	X, r24

	return errorStatus;
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d10:	0f 90       	pop	r0
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <vidTimer0_start>:

/*************************************************************************************************************/
enu_timerStatus_t vidTimer0_start(void)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	0f 92       	push	r0
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
	enu_timerStatus_t errorStatus = TIMER_OK;
     d22:	19 82       	std	Y+1, r1	; 0x01

	TCCR0_REG |=  global_prescaller << PRESCALLER_OFFSET;
     d24:	a3 e5       	ldi	r26, 0x53	; 83
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e3 e5       	ldi	r30, 0x53	; 83
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	90 81       	ld	r25, Z
     d2e:	80 91 97 01 	lds	r24, 0x0197
     d32:	89 2b       	or	r24, r25
     d34:	8c 93       	st	X, r24
	global_timerStatus  = RUNNING;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	80 93 98 01 	sts	0x0198, r24

	return errorStatus;
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d3e:	0f 90       	pop	r0
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <vidTimer0_stop>:

/*************************************************************************************************************/
enu_timerStatus_t vidTimer0_stop(void)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	0f 92       	push	r0
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
	enu_timerStatus_t errorStatus = TIMER_OK;
     d50:	19 82       	std	Y+1, r1	; 0x01

	TCCR0_REG &=  PRESCALLER_CLR_MSK;
     d52:	a3 e5       	ldi	r26, 0x53	; 83
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e3 e5       	ldi	r30, 0x53	; 83
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	88 7f       	andi	r24, 0xF8	; 248
     d5e:	8c 93       	st	X, r24
	global_timerStatus = STOPPED;
     d60:	10 92 98 01 	sts	0x0198, r1

	return errorStatus;
     d64:	89 81       	ldd	r24, Y+1	; 0x01
}
     d66:	0f 90       	pop	r0
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <u8Timer0_setTime_ms>:
/*************************************************************************************************************/
enu_timerStatus_t u8Timer0_setTime_ms(Uint32_t u32_time_ms)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	2d 97       	sbiw	r28, 0x0d	; 13
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	f8 94       	cli
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	6a 87       	std	Y+10, r22	; 0x0a
     d84:	7b 87       	std	Y+11, r23	; 0x0b
     d86:	8c 87       	std	Y+12, r24	; 0x0c
     d88:	9d 87       	std	Y+13, r25	; 0x0d
	enu_timerStatus_t errorStatus = TIMER_OK;
     d8a:	19 86       	std	Y+9, r1	; 0x09
	Uint32_t desired_ticks;
	Float32_t tick_time_ms;
	if( u32_time_ms < MAX_TIM_MS )
     d8c:	8a 85       	ldd	r24, Y+10	; 0x0a
     d8e:	9b 85       	ldd	r25, Y+11	; 0x0b
     d90:	ac 85       	ldd	r26, Y+12	; 0x0c
     d92:	bd 85       	ldd	r27, Y+13	; 0x0d
     d94:	88 38       	cpi	r24, 0x88	; 136
     d96:	23 e1       	ldi	r18, 0x13	; 19
     d98:	92 07       	cpc	r25, r18
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	a2 07       	cpc	r26, r18
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	b2 07       	cpc	r27, r18
     da2:	08 f0       	brcs	.+2      	; 0xda6 <u8Timer0_setTime_ms+0x38>
     da4:	a2 c0       	rjmp	.+324    	; 0xeea <u8Timer0_setTime_ms+0x17c>
	{
		tick_time_ms = (Float32_t)prescaller_map[global_prescaller] / ((Uint32_t)F_CPU / 1000U)  ;
     da6:	80 91 97 01 	lds	r24, 0x0197
     daa:	88 2f       	mov	r24, r24
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	fc 01       	movw	r30, r24
     db4:	e8 59       	subi	r30, 0x98	; 152
     db6:	fe 4f       	sbci	r31, 0xFE	; 254
     db8:	80 81       	ld	r24, Z
     dba:	91 81       	ldd	r25, Z+1	; 0x01
     dbc:	cc 01       	movw	r24, r24
     dbe:	a0 e0       	ldi	r26, 0x00	; 0
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	bc 01       	movw	r22, r24
     dc4:	cd 01       	movw	r24, r26
     dc6:	0e 94 4f 03 	call	0x69e	; 0x69e <__floatunsisf>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	bc 01       	movw	r22, r24
     dd0:	cd 01       	movw	r24, r26
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	4a ef       	ldi	r20, 0xFA	; 250
     dd8:	55 e4       	ldi	r21, 0x45	; 69
     dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	89 83       	std	Y+1, r24	; 0x01
     de4:	9a 83       	std	Y+2, r25	; 0x02
     de6:	ab 83       	std	Y+3, r26	; 0x03
     de8:	bc 83       	std	Y+4, r27	; 0x04
		desired_ticks = u32_time_ms / tick_time_ms;
     dea:	6a 85       	ldd	r22, Y+10	; 0x0a
     dec:	7b 85       	ldd	r23, Y+11	; 0x0b
     dee:	8c 85       	ldd	r24, Y+12	; 0x0c
     df0:	9d 85       	ldd	r25, Y+13	; 0x0d
     df2:	0e 94 4f 03 	call	0x69e	; 0x69e <__floatunsisf>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	bc 01       	movw	r22, r24
     dfc:	cd 01       	movw	r24, r26
     dfe:	29 81       	ldd	r18, Y+1	; 0x01
     e00:	3a 81       	ldd	r19, Y+2	; 0x02
     e02:	4b 81       	ldd	r20, Y+3	; 0x03
     e04:	5c 81       	ldd	r21, Y+4	; 0x04
     e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	bc 01       	movw	r22, r24
     e10:	cd 01       	movw	r24, r26
     e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	8d 83       	std	Y+5, r24	; 0x05
     e1c:	9e 83       	std	Y+6, r25	; 0x06
     e1e:	af 83       	std	Y+7, r26	; 0x07
     e20:	b8 87       	std	Y+8, r27	; 0x08

		/* Compare ticks with OVF_ticks */
		if(desired_ticks == OVF_TICKS)
     e22:	8d 81       	ldd	r24, Y+5	; 0x05
     e24:	9e 81       	ldd	r25, Y+6	; 0x06
     e26:	af 81       	ldd	r26, Y+7	; 0x07
     e28:	b8 85       	ldd	r27, Y+8	; 0x08
     e2a:	80 30       	cpi	r24, 0x00	; 0
     e2c:	21 e0       	ldi	r18, 0x01	; 1
     e2e:	92 07       	cpc	r25, r18
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	a2 07       	cpc	r26, r18
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	b2 07       	cpc	r27, r18
     e38:	21 f4       	brne	.+8      	; 0xe42 <u8Timer0_setTime_ms+0xd4>
		{
			global_ovf = 1;
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	80 93 99 01 	sts	0x0199, r24
     e40:	56 c0       	rjmp	.+172    	; 0xeee <u8Timer0_setTime_ms+0x180>
		}
		else if(desired_ticks < OVF_TICKS)
     e42:	8d 81       	ldd	r24, Y+5	; 0x05
     e44:	9e 81       	ldd	r25, Y+6	; 0x06
     e46:	af 81       	ldd	r26, Y+7	; 0x07
     e48:	b8 85       	ldd	r27, Y+8	; 0x08
     e4a:	8f 3f       	cpi	r24, 0xFF	; 255
     e4c:	91 05       	cpc	r25, r1
     e4e:	a1 05       	cpc	r26, r1
     e50:	b1 05       	cpc	r27, r1
     e52:	09 f0       	breq	.+2      	; 0xe56 <u8Timer0_setTime_ms+0xe8>
     e54:	a8 f4       	brcc	.+42     	; 0xe80 <u8Timer0_setTime_ms+0x112>
		{
			preload = OVF_TICKS - desired_ticks;
     e56:	2d 81       	ldd	r18, Y+5	; 0x05
     e58:	3e 81       	ldd	r19, Y+6	; 0x06
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	82 1b       	sub	r24, r18
     e60:	93 0b       	sbc	r25, r19
     e62:	90 93 9b 01 	sts	0x019B, r25
     e66:	80 93 9a 01 	sts	0x019A, r24
			TCNT0 = preload;
     e6a:	e2 e5       	ldi	r30, 0x52	; 82
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 91 9a 01 	lds	r24, 0x019A
     e72:	90 91 9b 01 	lds	r25, 0x019B
     e76:	80 83       	st	Z, r24
			global_ovf = 1;
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	80 93 99 01 	sts	0x0199, r24
     e7e:	37 c0       	rjmp	.+110    	; 0xeee <u8Timer0_setTime_ms+0x180>
		}
		else if(desired_ticks > OVF_TICKS)
     e80:	8d 81       	ldd	r24, Y+5	; 0x05
     e82:	9e 81       	ldd	r25, Y+6	; 0x06
     e84:	af 81       	ldd	r26, Y+7	; 0x07
     e86:	b8 85       	ldd	r27, Y+8	; 0x08
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	21 e0       	ldi	r18, 0x01	; 1
     e8c:	92 07       	cpc	r25, r18
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	a2 07       	cpc	r26, r18
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	b2 07       	cpc	r27, r18
     e96:	58 f1       	brcs	.+86     	; 0xeee <u8Timer0_setTime_ms+0x180>
		{
			global_ovf = (Uint8_t)(desired_ticks / OVF_TICKS);
     e98:	8d 81       	ldd	r24, Y+5	; 0x05
     e9a:	9e 81       	ldd	r25, Y+6	; 0x06
     e9c:	af 81       	ldd	r26, Y+7	; 0x07
     e9e:	b8 85       	ldd	r27, Y+8	; 0x08
     ea0:	89 2f       	mov	r24, r25
     ea2:	9a 2f       	mov	r25, r26
     ea4:	ab 2f       	mov	r26, r27
     ea6:	bb 27       	eor	r27, r27
     ea8:	80 93 99 01 	sts	0x0199, r24
			preload = (uint16_t)(OVF_TICKS - (desired_ticks % OVF_TICKS ));
     eac:	8d 81       	ldd	r24, Y+5	; 0x05
     eae:	9e 81       	ldd	r25, Y+6	; 0x06
     eb0:	9c 01       	movw	r18, r24
     eb2:	30 70       	andi	r19, 0x00	; 0
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	82 1b       	sub	r24, r18
     eba:	93 0b       	sbc	r25, r19
     ebc:	90 93 9b 01 	sts	0x019B, r25
     ec0:	80 93 9a 01 	sts	0x019A, r24
			TCNT0 = preload;
     ec4:	e2 e5       	ldi	r30, 0x52	; 82
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 91 9a 01 	lds	r24, 0x019A
     ecc:	90 91 9b 01 	lds	r25, 0x019B
     ed0:	80 83       	st	Z, r24
			if (preload > 0U)
     ed2:	80 91 9a 01 	lds	r24, 0x019A
     ed6:	90 91 9b 01 	lds	r25, 0x019B
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	41 f0       	breq	.+16     	; 0xeee <u8Timer0_setTime_ms+0x180>
			{
				global_ovf++;
     ede:	80 91 99 01 	lds	r24, 0x0199
     ee2:	8f 5f       	subi	r24, 0xFF	; 255
     ee4:	80 93 99 01 	sts	0x0199, r24
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <u8Timer0_setTime_ms+0x180>
			}
		}
	}
		else
		{
			errorStatus = TIMER_NOK;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	89 87       	std	Y+9, r24	; 0x09
		}


		return errorStatus;
     eee:	89 85       	ldd	r24, Y+9	; 0x09
	}
     ef0:	2d 96       	adiw	r28, 0x0d	; 13
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <vidTimer0_setcbf_OVF>:

/*************************************************************************************************************/
void vidTimer0_setcbf_OVF(cbf_t cbf)
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	00 d0       	rcall	.+0      	; 0xf08 <vidTimer0_setcbf_OVF+0x6>
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	9a 83       	std	Y+2, r25	; 0x02
     f0e:	89 83       	std	Y+1, r24	; 0x01
	if (cbf != NULL)
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	9a 81       	ldd	r25, Y+2	; 0x02
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	31 f0       	breq	.+12     	; 0xf24 <vidTimer0_setcbf_OVF+0x22>
	{
		globalCallFunc = cbf;
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	9a 81       	ldd	r25, Y+2	; 0x02
     f1c:	90 93 95 01 	sts	0x0195, r25
     f20:	80 93 94 01 	sts	0x0194, r24
	}
	return;
}
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <__vector_11>:

/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER0_OVF_vect)
{
     f2e:	1f 92       	push	r1
     f30:	0f 92       	push	r0
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	0f 92       	push	r0
     f36:	11 24       	eor	r1, r1
     f38:	2f 93       	push	r18
     f3a:	3f 93       	push	r19
     f3c:	4f 93       	push	r20
     f3e:	5f 93       	push	r21
     f40:	6f 93       	push	r22
     f42:	7f 93       	push	r23
     f44:	8f 93       	push	r24
     f46:	9f 93       	push	r25
     f48:	af 93       	push	r26
     f4a:	bf 93       	push	r27
     f4c:	ef 93       	push	r30
     f4e:	ff 93       	push	r31
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
	static Uint8_t counter = 0;
	counter++;
     f58:	80 91 96 01 	lds	r24, 0x0196
     f5c:	8f 5f       	subi	r24, 0xFF	; 255
     f5e:	80 93 96 01 	sts	0x0196, r24
	if(counter == global_ovf)
     f62:	90 91 96 01 	lds	r25, 0x0196
     f66:	80 91 99 01 	lds	r24, 0x0199
     f6a:	98 17       	cp	r25, r24
     f6c:	a1 f4       	brne	.+40     	; 0xf96 <__vector_11+0x68>
	{
		if (globalCallFunc != NULL)
     f6e:	80 91 94 01 	lds	r24, 0x0194
     f72:	90 91 95 01 	lds	r25, 0x0195
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	71 f0       	breq	.+28     	; 0xf96 <__vector_11+0x68>
		{
			counter = 0;
     f7a:	10 92 96 01 	sts	0x0196, r1

			globalCallFunc();
     f7e:	e0 91 94 01 	lds	r30, 0x0194
     f82:	f0 91 95 01 	lds	r31, 0x0195
     f86:	09 95       	icall
			TCNT0 = preload;
     f88:	e2 e5       	ldi	r30, 0x52	; 82
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 91 9a 01 	lds	r24, 0x019A
     f90:	90 91 9b 01 	lds	r25, 0x019B
     f94:	80 83       	st	Z, r24
//			global_ovf = 0;
//			vidTimer1_stop();
		}
	}
}
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	ff 91       	pop	r31
     f9c:	ef 91       	pop	r30
     f9e:	bf 91       	pop	r27
     fa0:	af 91       	pop	r26
     fa2:	9f 91       	pop	r25
     fa4:	8f 91       	pop	r24
     fa6:	7f 91       	pop	r23
     fa8:	6f 91       	pop	r22
     faa:	5f 91       	pop	r21
     fac:	4f 91       	pop	r20
     fae:	3f 91       	pop	r19
     fb0:	2f 91       	pop	r18
     fb2:	0f 90       	pop	r0
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	0f 90       	pop	r0
     fb8:	1f 90       	pop	r1
     fba:	18 95       	reti

00000fbc <vidExtInt_init>:

/************************************************************************************************/
/*									FUNCTION_IMPLEMENTATION										*/
/************************************************************************************************/
Uint8_t vidExtInt_init(enu_int_type_t enIntType, enu_sns_ctrl_t enSensControl)
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	29 97       	sbiw	r28, 0x09	; 9
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
     fd0:	8a 83       	std	Y+2, r24	; 0x02
     fd2:	6b 83       	std	Y+3, r22	; 0x03

	Uint8_t err_status = E_INT_OK;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	89 83       	std	Y+1, r24	; 0x01
	if(enIntType < INT_TYPE_INVALID && enSensControl < SENS_CONTROL_INVALID)
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	83 30       	cpi	r24, 0x03	; 3
     fdc:	08 f0       	brcs	.+2      	; 0xfe0 <vidExtInt_init+0x24>
     fde:	15 c1       	rjmp	.+554    	; 0x120a <vidExtInt_init+0x24e>
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	84 30       	cpi	r24, 0x04	; 4
     fe4:	08 f0       	brcs	.+2      	; 0xfe8 <vidExtInt_init+0x2c>
     fe6:	11 c1       	rjmp	.+546    	; 0x120a <vidExtInt_init+0x24e>
	{
		if (enIntType == INT_0)
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	88 23       	and	r24, r24
     fec:	09 f0       	breq	.+2      	; 0xff0 <vidExtInt_init+0x34>
     fee:	6b c0       	rjmp	.+214    	; 0x10c6 <vidExtInt_init+0x10a>
		{
//			DIO_s8SETPinVal(DIO_PIND_2, HIGH);
			switch (enSensControl)
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	39 87       	std	Y+9, r19	; 0x09
     ff8:	28 87       	std	Y+8, r18	; 0x08
     ffa:	88 85       	ldd	r24, Y+8	; 0x08
     ffc:	99 85       	ldd	r25, Y+9	; 0x09
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	91 05       	cpc	r25, r1
    1002:	21 f1       	breq	.+72     	; 0x104c <vidExtInt_init+0x90>
    1004:	28 85       	ldd	r18, Y+8	; 0x08
    1006:	39 85       	ldd	r19, Y+9	; 0x09
    1008:	22 30       	cpi	r18, 0x02	; 2
    100a:	31 05       	cpc	r19, r1
    100c:	2c f4       	brge	.+10     	; 0x1018 <vidExtInt_init+0x5c>
    100e:	88 85       	ldd	r24, Y+8	; 0x08
    1010:	99 85       	ldd	r25, Y+9	; 0x09
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	61 f0       	breq	.+24     	; 0x102e <vidExtInt_init+0x72>
    1016:	47 c0       	rjmp	.+142    	; 0x10a6 <vidExtInt_init+0xea>
    1018:	28 85       	ldd	r18, Y+8	; 0x08
    101a:	39 85       	ldd	r19, Y+9	; 0x09
    101c:	22 30       	cpi	r18, 0x02	; 2
    101e:	31 05       	cpc	r19, r1
    1020:	21 f1       	breq	.+72     	; 0x106a <vidExtInt_init+0xae>
    1022:	88 85       	ldd	r24, Y+8	; 0x08
    1024:	99 85       	ldd	r25, Y+9	; 0x09
    1026:	83 30       	cpi	r24, 0x03	; 3
    1028:	91 05       	cpc	r25, r1
    102a:	71 f1       	breq	.+92     	; 0x1088 <vidExtInt_init+0xcc>
    102c:	3c c0       	rjmp	.+120    	; 0x10a6 <vidExtInt_init+0xea>
			{
				case LOW_LEVEL 	: ClrBit(MCUCR_REG, ISC00); ClrBit(MCUCR_REG, ISC01); break;
    102e:	a5 e5       	ldi	r26, 0x55	; 85
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e5 e5       	ldi	r30, 0x55	; 85
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	8e 7f       	andi	r24, 0xFE	; 254
    103a:	8c 93       	st	X, r24
    103c:	a5 e5       	ldi	r26, 0x55	; 85
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e5 e5       	ldi	r30, 0x55	; 85
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	8d 7f       	andi	r24, 0xFD	; 253
    1048:	8c 93       	st	X, r24
    104a:	2e c0       	rjmp	.+92     	; 0x10a8 <vidExtInt_init+0xec>
				case ANY_LOGICAL: SetBit(MCUCR_REG, ISC00); ClrBit(MCUCR_REG, ISC01); break;
    104c:	a5 e5       	ldi	r26, 0x55	; 85
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e5 e5       	ldi	r30, 0x55	; 85
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	81 60       	ori	r24, 0x01	; 1
    1058:	8c 93       	st	X, r24
    105a:	a5 e5       	ldi	r26, 0x55	; 85
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e5 e5       	ldi	r30, 0x55	; 85
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	8d 7f       	andi	r24, 0xFD	; 253
    1066:	8c 93       	st	X, r24
    1068:	1f c0       	rjmp	.+62     	; 0x10a8 <vidExtInt_init+0xec>
				case FALL_EDGE 	: ClrBit(MCUCR_REG, ISC00); SetBit(MCUCR_REG, ISC01); break;
    106a:	a5 e5       	ldi	r26, 0x55	; 85
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e5 e5       	ldi	r30, 0x55	; 85
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	8e 7f       	andi	r24, 0xFE	; 254
    1076:	8c 93       	st	X, r24
    1078:	a5 e5       	ldi	r26, 0x55	; 85
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e5 e5       	ldi	r30, 0x55	; 85
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	82 60       	ori	r24, 0x02	; 2
    1084:	8c 93       	st	X, r24
    1086:	10 c0       	rjmp	.+32     	; 0x10a8 <vidExtInt_init+0xec>
				case RISE_EDGE 	: SetBit(MCUCR_REG, ISC00); SetBit(MCUCR_REG, ISC01); break;
    1088:	a5 e5       	ldi	r26, 0x55	; 85
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e5 e5       	ldi	r30, 0x55	; 85
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	81 60       	ori	r24, 0x01	; 1
    1094:	8c 93       	st	X, r24
    1096:	a5 e5       	ldi	r26, 0x55	; 85
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e5 e5       	ldi	r30, 0x55	; 85
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	82 60       	ori	r24, 0x02	; 2
    10a2:	8c 93       	st	X, r24
    10a4:	01 c0       	rjmp	.+2      	; 0x10a8 <vidExtInt_init+0xec>
				default : err_status = E_INT_NOK; break;
    10a6:	19 82       	std	Y+1, r1	; 0x01
			}

			SetBit(GICR_REG, INT0);
    10a8:	ab e5       	ldi	r26, 0x5B	; 91
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	eb e5       	ldi	r30, 0x5B	; 91
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	80 64       	ori	r24, 0x40	; 64
    10b4:	8c 93       	st	X, r24
			SetBit(GIFR_REG, INTF0);	// to clear flag for Interrupt 0
    10b6:	aa e5       	ldi	r26, 0x5A	; 90
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	ea e5       	ldi	r30, 0x5A	; 90
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	80 64       	ori	r24, 0x40	; 64
    10c2:	8c 93       	st	X, r24
    10c4:	a3 c0       	rjmp	.+326    	; 0x120c <vidExtInt_init+0x250>
		}
		else if (enIntType == INT_1)
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	09 f0       	breq	.+2      	; 0x10ce <vidExtInt_init+0x112>
    10cc:	6b c0       	rjmp	.+214    	; 0x11a4 <vidExtInt_init+0x1e8>
		{
//			DIO_s8SETPinVal(EXT_INT1, HIGH);
			switch (enSensControl)
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	3f 83       	std	Y+7, r19	; 0x07
    10d6:	2e 83       	std	Y+6, r18	; 0x06
    10d8:	8e 81       	ldd	r24, Y+6	; 0x06
    10da:	9f 81       	ldd	r25, Y+7	; 0x07
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	91 05       	cpc	r25, r1
    10e0:	21 f1       	breq	.+72     	; 0x112a <vidExtInt_init+0x16e>
    10e2:	2e 81       	ldd	r18, Y+6	; 0x06
    10e4:	3f 81       	ldd	r19, Y+7	; 0x07
    10e6:	22 30       	cpi	r18, 0x02	; 2
    10e8:	31 05       	cpc	r19, r1
    10ea:	2c f4       	brge	.+10     	; 0x10f6 <vidExtInt_init+0x13a>
    10ec:	8e 81       	ldd	r24, Y+6	; 0x06
    10ee:	9f 81       	ldd	r25, Y+7	; 0x07
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	61 f0       	breq	.+24     	; 0x110c <vidExtInt_init+0x150>
    10f4:	47 c0       	rjmp	.+142    	; 0x1184 <vidExtInt_init+0x1c8>
    10f6:	2e 81       	ldd	r18, Y+6	; 0x06
    10f8:	3f 81       	ldd	r19, Y+7	; 0x07
    10fa:	22 30       	cpi	r18, 0x02	; 2
    10fc:	31 05       	cpc	r19, r1
    10fe:	21 f1       	breq	.+72     	; 0x1148 <vidExtInt_init+0x18c>
    1100:	8e 81       	ldd	r24, Y+6	; 0x06
    1102:	9f 81       	ldd	r25, Y+7	; 0x07
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	91 05       	cpc	r25, r1
    1108:	71 f1       	breq	.+92     	; 0x1166 <vidExtInt_init+0x1aa>
    110a:	3c c0       	rjmp	.+120    	; 0x1184 <vidExtInt_init+0x1c8>
			{
				case LOW_LEVEL 	: ClrBit(MCUCR_REG, ISC10); ClrBit(MCUCR_REG, ISC11); break;
    110c:	a5 e5       	ldi	r26, 0x55	; 85
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e5 e5       	ldi	r30, 0x55	; 85
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	8b 7f       	andi	r24, 0xFB	; 251
    1118:	8c 93       	st	X, r24
    111a:	a5 e5       	ldi	r26, 0x55	; 85
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e5 e5       	ldi	r30, 0x55	; 85
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	87 7f       	andi	r24, 0xF7	; 247
    1126:	8c 93       	st	X, r24
    1128:	2e c0       	rjmp	.+92     	; 0x1186 <vidExtInt_init+0x1ca>
				case ANY_LOGICAL: SetBit(MCUCR_REG, ISC10); ClrBit(MCUCR_REG, ISC11); break;
    112a:	a5 e5       	ldi	r26, 0x55	; 85
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e5 e5       	ldi	r30, 0x55	; 85
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	84 60       	ori	r24, 0x04	; 4
    1136:	8c 93       	st	X, r24
    1138:	a5 e5       	ldi	r26, 0x55	; 85
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e5 e5       	ldi	r30, 0x55	; 85
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	87 7f       	andi	r24, 0xF7	; 247
    1144:	8c 93       	st	X, r24
    1146:	1f c0       	rjmp	.+62     	; 0x1186 <vidExtInt_init+0x1ca>
				case FALL_EDGE 	: ClrBit(MCUCR_REG, ISC10); SetBit(MCUCR_REG, ISC11); break;
    1148:	a5 e5       	ldi	r26, 0x55	; 85
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e5 e5       	ldi	r30, 0x55	; 85
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8b 7f       	andi	r24, 0xFB	; 251
    1154:	8c 93       	st	X, r24
    1156:	a5 e5       	ldi	r26, 0x55	; 85
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e5 e5       	ldi	r30, 0x55	; 85
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	88 60       	ori	r24, 0x08	; 8
    1162:	8c 93       	st	X, r24
    1164:	10 c0       	rjmp	.+32     	; 0x1186 <vidExtInt_init+0x1ca>
				case RISE_EDGE 	: SetBit(MCUCR_REG, ISC10); SetBit(MCUCR_REG, ISC11); break;
    1166:	a5 e5       	ldi	r26, 0x55	; 85
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e5 e5       	ldi	r30, 0x55	; 85
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	84 60       	ori	r24, 0x04	; 4
    1172:	8c 93       	st	X, r24
    1174:	a5 e5       	ldi	r26, 0x55	; 85
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e5 e5       	ldi	r30, 0x55	; 85
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	88 60       	ori	r24, 0x08	; 8
    1180:	8c 93       	st	X, r24
    1182:	01 c0       	rjmp	.+2      	; 0x1186 <vidExtInt_init+0x1ca>
				default : err_status = E_INT_NOK; break;
    1184:	19 82       	std	Y+1, r1	; 0x01
			}
			SetBit(GICR_REG, INT1);
    1186:	ab e5       	ldi	r26, 0x5B	; 91
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	eb e5       	ldi	r30, 0x5B	; 91
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	80 68       	ori	r24, 0x80	; 128
    1192:	8c 93       	st	X, r24
			SetBit(GIFR_REG, INTF1);	// to clear flag for Interrupt 1
    1194:	aa e5       	ldi	r26, 0x5A	; 90
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	ea e5       	ldi	r30, 0x5A	; 90
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	80 68       	ori	r24, 0x80	; 128
    11a0:	8c 93       	st	X, r24
    11a2:	34 c0       	rjmp	.+104    	; 0x120c <vidExtInt_init+0x250>
		}
		else if (enIntType == INT_2)
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	82 30       	cpi	r24, 0x02	; 2
    11a8:	89 f5       	brne	.+98     	; 0x120c <vidExtInt_init+0x250>
		{
//			DIO_s8SETPinVal(EXT_INT2, HIGH);
			switch (enSensControl)
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	3d 83       	std	Y+5, r19	; 0x05
    11b2:	2c 83       	std	Y+4, r18	; 0x04
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
    11b6:	9d 81       	ldd	r25, Y+5	; 0x05
    11b8:	82 30       	cpi	r24, 0x02	; 2
    11ba:	91 05       	cpc	r25, r1
    11bc:	31 f0       	breq	.+12     	; 0x11ca <vidExtInt_init+0x20e>
    11be:	2c 81       	ldd	r18, Y+4	; 0x04
    11c0:	3d 81       	ldd	r19, Y+5	; 0x05
    11c2:	23 30       	cpi	r18, 0x03	; 3
    11c4:	31 05       	cpc	r19, r1
    11c6:	49 f0       	breq	.+18     	; 0x11da <vidExtInt_init+0x21e>
    11c8:	10 c0       	rjmp	.+32     	; 0x11ea <vidExtInt_init+0x22e>
			{
				case FALL_EDGE 	: ClrBit(MCUCSR_REG, ISC2);  break;
    11ca:	a4 e5       	ldi	r26, 0x54	; 84
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e4 e5       	ldi	r30, 0x54	; 84
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	8f 7b       	andi	r24, 0xBF	; 191
    11d6:	8c 93       	st	X, r24
    11d8:	09 c0       	rjmp	.+18     	; 0x11ec <vidExtInt_init+0x230>
				case RISE_EDGE 	: SetBit(MCUCSR_REG, ISC2);  break;
    11da:	a4 e5       	ldi	r26, 0x54	; 84
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e4 e5       	ldi	r30, 0x54	; 84
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	80 64       	ori	r24, 0x40	; 64
    11e6:	8c 93       	st	X, r24
    11e8:	01 c0       	rjmp	.+2      	; 0x11ec <vidExtInt_init+0x230>
				default : err_status = E_INT_NOK; break;
    11ea:	19 82       	std	Y+1, r1	; 0x01
			}
			SetBit(GICR_REG, INT2);
    11ec:	ab e5       	ldi	r26, 0x5B	; 91
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	eb e5       	ldi	r30, 0x5B	; 91
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	80 62       	ori	r24, 0x20	; 32
    11f8:	8c 93       	st	X, r24
			SetBit(GIFR_REG, INTF2);  // to clear flag for Interrupt 2
    11fa:	aa e5       	ldi	r26, 0x5A	; 90
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	ea e5       	ldi	r30, 0x5A	; 90
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	80 62       	ori	r24, 0x20	; 32
    1206:	8c 93       	st	X, r24
    1208:	01 c0       	rjmp	.+2      	; 0x120c <vidExtInt_init+0x250>
		}
	}
	else
	{
		err_status = E_INT_NOK;
    120a:	19 82       	std	Y+1, r1	; 0x01
	}

	SetBit(SREG_REG, I); // enable global interrupt
    120c:	af e5       	ldi	r26, 0x5F	; 95
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	ef e5       	ldi	r30, 0x5F	; 95
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	80 68       	ori	r24, 0x80	; 128
    1218:	8c 93       	st	X, r24


	return err_status;
    121a:	89 81       	ldd	r24, Y+1	; 0x01
}
    121c:	29 96       	adiw	r28, 0x09	; 9
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <vidCallBackFunc>:



void vidCallBackFunc(ptr_func funcCopy)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	00 d0       	rcall	.+0      	; 0x1234 <vidCallBackFunc+0x6>
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	9a 83       	std	Y+2, r25	; 0x02
    123a:	89 83       	std	Y+1, r24	; 0x01
	callBack = funcCopy;
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	9a 81       	ldd	r25, Y+2	; 0x02
    1240:	90 93 9d 01 	sts	0x019D, r25
    1244:	80 93 9c 01 	sts	0x019C, r24

}
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <vidCallBackFuncInt1>:


void vidCallBackFuncInt1(ptr_func funcCopy)
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	00 d0       	rcall	.+0      	; 0x1258 <vidCallBackFuncInt1+0x6>
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	9a 83       	std	Y+2, r25	; 0x02
    125e:	89 83       	std	Y+1, r24	; 0x01
	callBackFunc = funcCopy;
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	9a 81       	ldd	r25, Y+2	; 0x02
    1264:	90 93 9f 01 	sts	0x019F, r25
    1268:	80 93 9e 01 	sts	0x019E, r24

}
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <__vector_1>:




ISR(INT0_vect)
{
    1276:	1f 92       	push	r1
    1278:	0f 92       	push	r0
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	0f 92       	push	r0
    127e:	11 24       	eor	r1, r1
    1280:	2f 93       	push	r18
    1282:	3f 93       	push	r19
    1284:	4f 93       	push	r20
    1286:	5f 93       	push	r21
    1288:	6f 93       	push	r22
    128a:	7f 93       	push	r23
    128c:	8f 93       	push	r24
    128e:	9f 93       	push	r25
    1290:	af 93       	push	r26
    1292:	bf 93       	push	r27
    1294:	ef 93       	push	r30
    1296:	ff 93       	push	r31
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
	callBack();
    12a0:	e0 91 9c 01 	lds	r30, 0x019C
    12a4:	f0 91 9d 01 	lds	r31, 0x019D
    12a8:	09 95       	icall
}
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	ff 91       	pop	r31
    12b0:	ef 91       	pop	r30
    12b2:	bf 91       	pop	r27
    12b4:	af 91       	pop	r26
    12b6:	9f 91       	pop	r25
    12b8:	8f 91       	pop	r24
    12ba:	7f 91       	pop	r23
    12bc:	6f 91       	pop	r22
    12be:	5f 91       	pop	r21
    12c0:	4f 91       	pop	r20
    12c2:	3f 91       	pop	r19
    12c4:	2f 91       	pop	r18
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	0f 90       	pop	r0
    12cc:	1f 90       	pop	r1
    12ce:	18 95       	reti

000012d0 <__vector_2>:

ISR(INT1_vect)
{
    12d0:	1f 92       	push	r1
    12d2:	0f 92       	push	r0
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	0f 92       	push	r0
    12d8:	11 24       	eor	r1, r1
    12da:	2f 93       	push	r18
    12dc:	3f 93       	push	r19
    12de:	4f 93       	push	r20
    12e0:	5f 93       	push	r21
    12e2:	6f 93       	push	r22
    12e4:	7f 93       	push	r23
    12e6:	8f 93       	push	r24
    12e8:	9f 93       	push	r25
    12ea:	af 93       	push	r26
    12ec:	bf 93       	push	r27
    12ee:	ef 93       	push	r30
    12f0:	ff 93       	push	r31
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
	callBackFunc();
    12fa:	e0 91 9e 01 	lds	r30, 0x019E
    12fe:	f0 91 9f 01 	lds	r31, 0x019F
    1302:	09 95       	icall
}
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	ff 91       	pop	r31
    130a:	ef 91       	pop	r30
    130c:	bf 91       	pop	r27
    130e:	af 91       	pop	r26
    1310:	9f 91       	pop	r25
    1312:	8f 91       	pop	r24
    1314:	7f 91       	pop	r23
    1316:	6f 91       	pop	r22
    1318:	5f 91       	pop	r21
    131a:	4f 91       	pop	r20
    131c:	3f 91       	pop	r19
    131e:	2f 91       	pop	r18
    1320:	0f 90       	pop	r0
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	0f 90       	pop	r0
    1326:	1f 90       	pop	r1
    1328:	18 95       	reti

0000132a <DIO_s8SETPortDir>:
volatile Uint8_t* ddrReg[4] = { DDRA_REG, DDRB_REG, DDRC_REG, DDRD_REG };
volatile Uint8_t* pinReg[4] = { PINA_REG, PINB_REG, PINC_REG, PIND_REG };


Sint8_t DIO_s8SETPortDir(enu_port enPortCopy,  enu_dir enPortDir)
{
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	00 d0       	rcall	.+0      	; 0x1330 <DIO_s8SETPortDir+0x6>
    1330:	0f 92       	push	r0
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	8a 83       	std	Y+2, r24	; 0x02
    1338:	6b 83       	std	Y+3, r22	; 0x03
	Sint8_t errStatus = E_OK;
    133a:	19 82       	std	Y+1, r1	; 0x01

	if (enPortCopy < PORT_INVALID && enPortDir < DIR_INVALID)
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	84 30       	cpi	r24, 0x04	; 4
    1340:	20 f5       	brcc	.+72     	; 0x138a <DIO_s8SETPortDir+0x60>
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	82 30       	cpi	r24, 0x02	; 2
    1346:	08 f5       	brcc	.+66     	; 0x138a <DIO_s8SETPortDir+0x60>
	{
		if (enPortDir == INPUT)
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	88 23       	and	r24, r24
    134c:	69 f4       	brne	.+26     	; 0x1368 <DIO_s8SETPortDir+0x3e>
		{
			*ddrReg[enPortCopy] = 0x00;
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	88 2f       	mov	r24, r24
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	fc 01       	movw	r30, r24
    135a:	e4 58       	subi	r30, 0x84	; 132
    135c:	fe 4f       	sbci	r31, 0xFE	; 254
    135e:	01 90       	ld	r0, Z+
    1360:	f0 81       	ld	r31, Z
    1362:	e0 2d       	mov	r30, r0
    1364:	10 82       	st	Z, r1
    1366:	13 c0       	rjmp	.+38     	; 0x138e <DIO_s8SETPortDir+0x64>
		}
		else if(enPortDir == OUTPUT)
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	81 f4       	brne	.+32     	; 0x138e <DIO_s8SETPortDir+0x64>
		{
			*ddrReg[enPortCopy] = 0xff;
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	fc 01       	movw	r30, r24
    137a:	e4 58       	subi	r30, 0x84	; 132
    137c:	fe 4f       	sbci	r31, 0xFE	; 254
    137e:	01 90       	ld	r0, Z+
    1380:	f0 81       	ld	r31, Z
    1382:	e0 2d       	mov	r30, r0
    1384:	8f ef       	ldi	r24, 0xFF	; 255
    1386:	80 83       	st	Z, r24
    1388:	02 c0       	rjmp	.+4      	; 0x138e <DIO_s8SETPortDir+0x64>
			/* do nothing */
		}
	}
	else
	{
		errStatus = E_NOK;
    138a:	8f ef       	ldi	r24, 0xFF	; 255
    138c:	89 83       	std	Y+1, r24	; 0x01
	}
	return errStatus;
    138e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <DIO_s8SETPortVal>:


Sint8_t DIO_s8SETPortVal(enu_port enPortCopy,  Uint8_t u8PortVal)
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <DIO_s8SETPortVal+0x6>
    13a2:	0f 92       	push	r0
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	8a 83       	std	Y+2, r24	; 0x02
    13aa:	6b 83       	std	Y+3, r22	; 0x03
	Sint8_t errStatus = E_OK;
    13ac:	19 82       	std	Y+1, r1	; 0x01
	if (enPortCopy < PORT_INVALID)
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	84 30       	cpi	r24, 0x04	; 4
    13b2:	70 f4       	brcc	.+28     	; 0x13d0 <DIO_s8SETPortVal+0x34>
	{
		*portReg[enPortCopy] = u8PortVal;
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	88 2f       	mov	r24, r24
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	fc 01       	movw	r30, r24
    13c0:	ec 58       	subi	r30, 0x8C	; 140
    13c2:	fe 4f       	sbci	r31, 0xFE	; 254
    13c4:	01 90       	ld	r0, Z+
    13c6:	f0 81       	ld	r31, Z
    13c8:	e0 2d       	mov	r30, r0
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	80 83       	st	Z, r24
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <DIO_s8SETPortVal+0x38>
	}
	else
	{
		errStatus = E_NOK;
    13d0:	8f ef       	ldi	r24, 0xFF	; 255
    13d2:	89 83       	std	Y+1, r24	; 0x01
	}


	return errStatus;
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <DIO_s8GETPortVal>:



Sint8_t DIO_s8GETPortVal(enu_port enPortCopy,  Uint8_t* pu8Val)
{
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <DIO_s8GETPortVal+0x6>
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <DIO_s8GETPortVal+0x8>
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	8a 83       	std	Y+2, r24	; 0x02
    13f0:	7c 83       	std	Y+4, r23	; 0x04
    13f2:	6b 83       	std	Y+3, r22	; 0x03
	Sint8_t errStatus = E_OK;
    13f4:	19 82       	std	Y+1, r1	; 0x01
	if (enPortCopy < PORT_INVALID )
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	84 30       	cpi	r24, 0x04	; 4
    13fa:	80 f4       	brcc	.+32     	; 0x141c <DIO_s8GETPortVal+0x3a>
	{
		*pu8Val = *pinReg[enPortCopy];
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	88 2f       	mov	r24, r24
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	fc 01       	movw	r30, r24
    1408:	ec 57       	subi	r30, 0x7C	; 124
    140a:	fe 4f       	sbci	r31, 0xFE	; 254
    140c:	01 90       	ld	r0, Z+
    140e:	f0 81       	ld	r31, Z
    1410:	e0 2d       	mov	r30, r0
    1412:	80 81       	ld	r24, Z
    1414:	eb 81       	ldd	r30, Y+3	; 0x03
    1416:	fc 81       	ldd	r31, Y+4	; 0x04
    1418:	80 83       	st	Z, r24
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_s8GETPortVal+0x3e>
	}
	else
	{
		errStatus = E_NOK;
    141c:	8f ef       	ldi	r24, 0xFF	; 255
    141e:	89 83       	std	Y+1, r24	; 0x01
	}
	return errStatus;
    1420:	89 81       	ldd	r24, Y+1	; 0x01
}
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <DIO_s8SETPinDir>:




Sint8_t DIO_s8SETPinDir (enu_pin enPinCopy, enu_dir enPortDir)
{
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	00 d0       	rcall	.+0      	; 0x1436 <DIO_s8SETPinDir+0x6>
    1436:	00 d0       	rcall	.+0      	; 0x1438 <DIO_s8SETPinDir+0x8>
    1438:	0f 92       	push	r0
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	8c 83       	std	Y+4, r24	; 0x04
    1440:	6d 83       	std	Y+5, r22	; 0x05
	Sint8_t errStatus = E_OK;
    1442:	1b 82       	std	Y+3, r1	; 0x03
	Uint8_t portID;
	Uint8_t pinID;

	if (enPinCopy < PIN_INVALID && enPortDir< DIR_INVALID)
    1444:	8c 81       	ldd	r24, Y+4	; 0x04
    1446:	80 32       	cpi	r24, 0x20	; 32
    1448:	08 f0       	brcs	.+2      	; 0x144c <DIO_s8SETPinDir+0x1c>
    144a:	5d c0       	rjmp	.+186    	; 0x1506 <DIO_s8SETPinDir+0xd6>
    144c:	8d 81       	ldd	r24, Y+5	; 0x05
    144e:	82 30       	cpi	r24, 0x02	; 2
    1450:	08 f0       	brcs	.+2      	; 0x1454 <DIO_s8SETPinDir+0x24>
    1452:	59 c0       	rjmp	.+178    	; 0x1506 <DIO_s8SETPinDir+0xd6>
	{
		portID = enPinCopy/8;
    1454:	8c 81       	ldd	r24, Y+4	; 0x04
    1456:	86 95       	lsr	r24
    1458:	86 95       	lsr	r24
    145a:	86 95       	lsr	r24
    145c:	8a 83       	std	Y+2, r24	; 0x02
		pinID  = enPinCopy%8;
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
    1460:	87 70       	andi	r24, 0x07	; 7
    1462:	89 83       	std	Y+1, r24	; 0x01

		if (enPortDir == INPUT)
    1464:	8d 81       	ldd	r24, Y+5	; 0x05
    1466:	88 23       	and	r24, r24
    1468:	31 f5       	brne	.+76     	; 0x14b6 <DIO_s8SETPinDir+0x86>
		{
			ClrBit(*ddrReg[portID],pinID);
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	88 2f       	mov	r24, r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	fc 01       	movw	r30, r24
    1476:	e4 58       	subi	r30, 0x84	; 132
    1478:	fe 4f       	sbci	r31, 0xFE	; 254
    147a:	a0 81       	ld	r26, Z
    147c:	b1 81       	ldd	r27, Z+1	; 0x01
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	fc 01       	movw	r30, r24
    148a:	e4 58       	subi	r30, 0x84	; 132
    148c:	fe 4f       	sbci	r31, 0xFE	; 254
    148e:	01 90       	ld	r0, Z+
    1490:	f0 81       	ld	r31, Z
    1492:	e0 2d       	mov	r30, r0
    1494:	80 81       	ld	r24, Z
    1496:	48 2f       	mov	r20, r24
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <DIO_s8SETPinDir+0x7a>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <DIO_s8SETPinDir+0x76>
    14ae:	80 95       	com	r24
    14b0:	84 23       	and	r24, r20
    14b2:	8c 93       	st	X, r24
    14b4:	2a c0       	rjmp	.+84     	; 0x150a <DIO_s8SETPinDir+0xda>
		}
		else if(enPortDir == OUTPUT)
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	39 f5       	brne	.+78     	; 0x150a <DIO_s8SETPinDir+0xda>
		{
			SetBit(*ddrReg[portID],pinID);
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	88 2f       	mov	r24, r24
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	fc 01       	movw	r30, r24
    14c8:	e4 58       	subi	r30, 0x84	; 132
    14ca:	fe 4f       	sbci	r31, 0xFE	; 254
    14cc:	a0 81       	ld	r26, Z
    14ce:	b1 81       	ldd	r27, Z+1	; 0x01
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	88 2f       	mov	r24, r24
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	fc 01       	movw	r30, r24
    14dc:	e4 58       	subi	r30, 0x84	; 132
    14de:	fe 4f       	sbci	r31, 0xFE	; 254
    14e0:	01 90       	ld	r0, Z+
    14e2:	f0 81       	ld	r31, Z
    14e4:	e0 2d       	mov	r30, r0
    14e6:	80 81       	ld	r24, Z
    14e8:	48 2f       	mov	r20, r24
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	02 2e       	mov	r0, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <DIO_s8SETPinDir+0xcc>
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	0a 94       	dec	r0
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <DIO_s8SETPinDir+0xc8>
    1500:	84 2b       	or	r24, r20
    1502:	8c 93       	st	X, r24
    1504:	02 c0       	rjmp	.+4      	; 0x150a <DIO_s8SETPinDir+0xda>
			/* do nothing */
		}
	}
	else
	{
		errStatus = E_NOK;
    1506:	8f ef       	ldi	r24, 0xFF	; 255
    1508:	8b 83       	std	Y+3, r24	; 0x03
	}
	return errStatus;
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <DIO_s8SETPinVal>:


Sint8_t DIO_s8SETPinVal (enu_pin enPinCopy, enu_val enPortVal)
{
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	00 d0       	rcall	.+0      	; 0x1522 <DIO_s8SETPinVal+0x6>
    1522:	00 d0       	rcall	.+0      	; 0x1524 <DIO_s8SETPinVal+0x8>
    1524:	0f 92       	push	r0
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	8c 83       	std	Y+4, r24	; 0x04
    152c:	6d 83       	std	Y+5, r22	; 0x05
	Sint8_t errStatus = E_OK;
    152e:	1b 82       	std	Y+3, r1	; 0x03
	Uint8_t portID;
	Uint8_t pinID;

	if (enPinCopy < PIN_INVALID && enPortVal< VAL_INVALID)
    1530:	8c 81       	ldd	r24, Y+4	; 0x04
    1532:	80 32       	cpi	r24, 0x20	; 32
    1534:	08 f0       	brcs	.+2      	; 0x1538 <DIO_s8SETPinVal+0x1c>
    1536:	5d c0       	rjmp	.+186    	; 0x15f2 <DIO_s8SETPinVal+0xd6>
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	82 30       	cpi	r24, 0x02	; 2
    153c:	08 f0       	brcs	.+2      	; 0x1540 <DIO_s8SETPinVal+0x24>
    153e:	59 c0       	rjmp	.+178    	; 0x15f2 <DIO_s8SETPinVal+0xd6>
	{
		portID = enPinCopy/8;
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	86 95       	lsr	r24
    1544:	86 95       	lsr	r24
    1546:	86 95       	lsr	r24
    1548:	8a 83       	std	Y+2, r24	; 0x02
		pinID  = enPinCopy%8;
    154a:	8c 81       	ldd	r24, Y+4	; 0x04
    154c:	87 70       	andi	r24, 0x07	; 7
    154e:	89 83       	std	Y+1, r24	; 0x01

		if (enPortVal == LOW)
    1550:	8d 81       	ldd	r24, Y+5	; 0x05
    1552:	88 23       	and	r24, r24
    1554:	31 f5       	brne	.+76     	; 0x15a2 <DIO_s8SETPinVal+0x86>
		{
			ClrBit(*portReg[portID],pinID);
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	fc 01       	movw	r30, r24
    1562:	ec 58       	subi	r30, 0x8C	; 140
    1564:	fe 4f       	sbci	r31, 0xFE	; 254
    1566:	a0 81       	ld	r26, Z
    1568:	b1 81       	ldd	r27, Z+1	; 0x01
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	88 2f       	mov	r24, r24
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	fc 01       	movw	r30, r24
    1576:	ec 58       	subi	r30, 0x8C	; 140
    1578:	fe 4f       	sbci	r31, 0xFE	; 254
    157a:	01 90       	ld	r0, Z+
    157c:	f0 81       	ld	r31, Z
    157e:	e0 2d       	mov	r30, r0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <DIO_s8SETPinVal+0x7a>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <DIO_s8SETPinVal+0x76>
    159a:	80 95       	com	r24
    159c:	84 23       	and	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	2a c0       	rjmp	.+84     	; 0x15f6 <DIO_s8SETPinVal+0xda>
		}
		else if(enPortVal == HIGH)
    15a2:	8d 81       	ldd	r24, Y+5	; 0x05
    15a4:	81 30       	cpi	r24, 0x01	; 1
    15a6:	39 f5       	brne	.+78     	; 0x15f6 <DIO_s8SETPinVal+0xda>
		{
			SetBit(*portReg[portID],pinID);
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	88 2f       	mov	r24, r24
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	fc 01       	movw	r30, r24
    15b4:	ec 58       	subi	r30, 0x8C	; 140
    15b6:	fe 4f       	sbci	r31, 0xFE	; 254
    15b8:	a0 81       	ld	r26, Z
    15ba:	b1 81       	ldd	r27, Z+1	; 0x01
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	88 2f       	mov	r24, r24
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	fc 01       	movw	r30, r24
    15c8:	ec 58       	subi	r30, 0x8C	; 140
    15ca:	fe 4f       	sbci	r31, 0xFE	; 254
    15cc:	01 90       	ld	r0, Z+
    15ce:	f0 81       	ld	r31, Z
    15d0:	e0 2d       	mov	r30, r0
    15d2:	80 81       	ld	r24, Z
    15d4:	48 2f       	mov	r20, r24
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 2e       	mov	r0, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <DIO_s8SETPinVal+0xcc>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	0a 94       	dec	r0
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <DIO_s8SETPinVal+0xc8>
    15ec:	84 2b       	or	r24, r20
    15ee:	8c 93       	st	X, r24
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <DIO_s8SETPinVal+0xda>
			/* do nothing */
		}
	}
	else
	{
		errStatus = E_NOK;
    15f2:	8f ef       	ldi	r24, 0xFF	; 255
    15f4:	8b 83       	std	Y+3, r24	; 0x03
	}
	return errStatus;
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	08 95       	ret

00001608 <DIO_s8TOGPinVal>:


Sint8_t DIO_s8TOGPinVal (enu_pin enPinCopy)
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	00 d0       	rcall	.+0      	; 0x160e <DIO_s8TOGPinVal+0x6>
    160e:	00 d0       	rcall	.+0      	; 0x1610 <DIO_s8TOGPinVal+0x8>
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	8c 83       	std	Y+4, r24	; 0x04
	Sint8_t errStatus = E_OK;
    1616:	1b 82       	std	Y+3, r1	; 0x03
	Uint8_t portID;
	Uint8_t pinID;

	if (enPinCopy < PIN_INVALID)
    1618:	8c 81       	ldd	r24, Y+4	; 0x04
    161a:	80 32       	cpi	r24, 0x20	; 32
    161c:	68 f5       	brcc	.+90     	; 0x1678 <DIO_s8TOGPinVal+0x70>
	{
		portID = enPinCopy/8;
    161e:	8c 81       	ldd	r24, Y+4	; 0x04
    1620:	86 95       	lsr	r24
    1622:	86 95       	lsr	r24
    1624:	86 95       	lsr	r24
    1626:	8a 83       	std	Y+2, r24	; 0x02
		pinID  = enPinCopy%8;
    1628:	8c 81       	ldd	r24, Y+4	; 0x04
    162a:	87 70       	andi	r24, 0x07	; 7
    162c:	89 83       	std	Y+1, r24	; 0x01

		TogBit(*portReg[portID],pinID);
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	88 2f       	mov	r24, r24
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	fc 01       	movw	r30, r24
    163a:	ec 58       	subi	r30, 0x8C	; 140
    163c:	fe 4f       	sbci	r31, 0xFE	; 254
    163e:	a0 81       	ld	r26, Z
    1640:	b1 81       	ldd	r27, Z+1	; 0x01
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	88 2f       	mov	r24, r24
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	fc 01       	movw	r30, r24
    164e:	ec 58       	subi	r30, 0x8C	; 140
    1650:	fe 4f       	sbci	r31, 0xFE	; 254
    1652:	01 90       	ld	r0, Z+
    1654:	f0 81       	ld	r31, Z
    1656:	e0 2d       	mov	r30, r0
    1658:	80 81       	ld	r24, Z
    165a:	48 2f       	mov	r20, r24
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	02 2e       	mov	r0, r18
    1668:	02 c0       	rjmp	.+4      	; 0x166e <DIO_s8TOGPinVal+0x66>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	0a 94       	dec	r0
    1670:	e2 f7       	brpl	.-8      	; 0x166a <DIO_s8TOGPinVal+0x62>
    1672:	84 27       	eor	r24, r20
    1674:	8c 93       	st	X, r24
    1676:	02 c0       	rjmp	.+4      	; 0x167c <DIO_s8TOGPinVal+0x74>
	}
	else
	{
		errStatus = E_NOK;
    1678:	8f ef       	ldi	r24, 0xFF	; 255
    167a:	8b 83       	std	Y+3, r24	; 0x03
	}
	return errStatus;
    167c:	8b 81       	ldd	r24, Y+3	; 0x03

}
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	08 95       	ret

0000168c <DIO_s8GETPinVal>:

Sint8_t DIO_s8GETPinVal (enu_pin enPinCopy, Uint8_t* pu8Val)
{
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	00 d0       	rcall	.+0      	; 0x1692 <DIO_s8GETPinVal+0x6>
    1692:	00 d0       	rcall	.+0      	; 0x1694 <DIO_s8GETPinVal+0x8>
    1694:	00 d0       	rcall	.+0      	; 0x1696 <DIO_s8GETPinVal+0xa>
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	8c 83       	std	Y+4, r24	; 0x04
    169c:	7e 83       	std	Y+6, r23	; 0x06
    169e:	6d 83       	std	Y+5, r22	; 0x05
	Sint8_t errStatus = E_OK;
    16a0:	1b 82       	std	Y+3, r1	; 0x03
	Uint8_t portID;
	Uint8_t pinID;
	if (enPinCopy < PIN_INVALID)
    16a2:	8c 81       	ldd	r24, Y+4	; 0x04
    16a4:	80 32       	cpi	r24, 0x20	; 32
    16a6:	28 f5       	brcc	.+74     	; 0x16f2 <DIO_s8GETPinVal+0x66>
	{
		portID = enPinCopy/8;
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	86 95       	lsr	r24
    16ac:	86 95       	lsr	r24
    16ae:	86 95       	lsr	r24
    16b0:	8a 83       	std	Y+2, r24	; 0x02
		pinID  = enPinCopy%8;
    16b2:	8c 81       	ldd	r24, Y+4	; 0x04
    16b4:	87 70       	andi	r24, 0x07	; 7
    16b6:	89 83       	std	Y+1, r24	; 0x01

		*pu8Val = GetBit(*pinReg[portID], pinID);
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	88 2f       	mov	r24, r24
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	fc 01       	movw	r30, r24
    16c4:	ec 57       	subi	r30, 0x7C	; 124
    16c6:	fe 4f       	sbci	r31, 0xFE	; 254
    16c8:	01 90       	ld	r0, Z+
    16ca:	f0 81       	ld	r31, Z
    16cc:	e0 2d       	mov	r30, r0
    16ce:	80 81       	ld	r24, Z
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	88 2f       	mov	r24, r24
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	a9 01       	movw	r20, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <DIO_s8GETPinVal+0x56>
    16de:	55 95       	asr	r21
    16e0:	47 95       	ror	r20
    16e2:	8a 95       	dec	r24
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <DIO_s8GETPinVal+0x52>
    16e6:	ca 01       	movw	r24, r20
    16e8:	81 70       	andi	r24, 0x01	; 1
    16ea:	ed 81       	ldd	r30, Y+5	; 0x05
    16ec:	fe 81       	ldd	r31, Y+6	; 0x06
    16ee:	80 83       	st	Z, r24
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_s8GETPinVal+0x6a>

	}
	else
	{
		errStatus = E_NOK;
    16f2:	8f ef       	ldi	r24, 0xFF	; 255
    16f4:	8b 83       	std	Y+3, r24	; 0x03
	}
	return errStatus;
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    16f8:	26 96       	adiw	r28, 0x06	; 6
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <HLed_Init>:
//#include "../../MCAL/DIO/DIO_Interface.h"
#include "led.h"


enu_ledError_t HLed_Init(enu_pin en_pinNum)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	00 d0       	rcall	.+0      	; 0x1710 <HLed_Init+0x6>
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	8a 83       	std	Y+2, r24	; 0x02
	enu_ledError_t errorStatus = LED_OK;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	89 83       	std	Y+1, r24	; 0x01

	if ( en_pinNum < PIN_INVALID )
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	80 32       	cpi	r24, 0x20	; 32
    171e:	28 f4       	brcc	.+10     	; 0x172a <HLed_Init+0x20>
	{
		DIO_s8SETPinDir(en_pinNum, OUTPUT);
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	61 e0       	ldi	r22, 0x01	; 1
    1724:	0e 94 18 0a 	call	0x1430	; 0x1430 <DIO_s8SETPinDir>
    1728:	01 c0       	rjmp	.+2      	; 0x172c <HLed_Init+0x22>
	}
	else
	{
		errorStatus = LED_NOK;
    172a:	19 82       	std	Y+1, r1	; 0x01
	}



	return errorStatus;
    172c:	89 81       	ldd	r24, Y+1	; 0x01

}
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <HLed_on>:

enu_ledError_t HLed_on(enu_pin en_pinx)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	00 d0       	rcall	.+0      	; 0x173e <HLed_on+0x6>
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	8a 83       	std	Y+2, r24	; 0x02
	enu_ledError_t errorStatus = LED_OK;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	89 83       	std	Y+1, r24	; 0x01

	if ( en_pinx < PIN_INVALID )
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	80 32       	cpi	r24, 0x20	; 32
    174c:	28 f4       	brcc	.+10     	; 0x1758 <HLed_on+0x20>
	{
		DIO_s8SETPinVal(en_pinx, HIGH);
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	61 e0       	ldi	r22, 0x01	; 1
    1752:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_s8SETPinVal>
    1756:	01 c0       	rjmp	.+2      	; 0x175a <HLed_on+0x22>
	}
	else
	{
		errorStatus = LED_NOK;
    1758:	19 82       	std	Y+1, r1	; 0x01
	}



	return errorStatus;
    175a:	89 81       	ldd	r24, Y+1	; 0x01

}
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <HLed_off>:



enu_ledError_t HLed_off(enu_pin en_pinx)
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	00 d0       	rcall	.+0      	; 0x176c <HLed_off+0x6>
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	8a 83       	std	Y+2, r24	; 0x02
	enu_ledError_t errorStatus = LED_OK;
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	89 83       	std	Y+1, r24	; 0x01

	if ( en_pinx < PIN_INVALID )
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	80 32       	cpi	r24, 0x20	; 32
    177a:	28 f4       	brcc	.+10     	; 0x1786 <HLed_off+0x20>
	{
		DIO_s8SETPinVal(en_pinx, LOW);
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_s8SETPinVal>
    1784:	01 c0       	rjmp	.+2      	; 0x1788 <HLed_off+0x22>
	}
	else
	{
		errorStatus = LED_NOK;
    1786:	19 82       	std	Y+1, r1	; 0x01
	}



	return errorStatus;
    1788:	89 81       	ldd	r24, Y+1	; 0x01

}
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <HLed_toggle>:


enu_ledError_t HLed_toggle(enu_pin en_pinx)
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	00 d0       	rcall	.+0      	; 0x179a <HLed_toggle+0x6>
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	8a 83       	std	Y+2, r24	; 0x02
	enu_ledError_t errorStatus = LED_OK;
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	89 83       	std	Y+1, r24	; 0x01

	if ( en_pinx < PIN_INVALID )
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	80 32       	cpi	r24, 0x20	; 32
    17a8:	20 f4       	brcc	.+8      	; 0x17b2 <HLed_toggle+0x1e>
	{
		DIO_s8TOGPinVal(en_pinx);
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	0e 94 04 0b 	call	0x1608	; 0x1608 <DIO_s8TOGPinVal>
    17b0:	01 c0       	rjmp	.+2      	; 0x17b4 <HLed_toggle+0x20>

	}
	else
	{
		errorStatus = LED_NOK;
    17b2:	19 82       	std	Y+1, r1	; 0x01
	}

	return errorStatus;
    17b4:	89 81       	ldd	r24, Y+1	; 0x01

}
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <HTimer_enInit>:

/*************************************************************************************************************
 * 							Function Implementation
 ************************************************************************************************************/
enu_HTimerError_t HTimer_enInit(void)
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	0f 92       	push	r0
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
	enu_HTimerError_t errorStatus = TIMER_OK;
    17ca:	19 82       	std	Y+1, r1	; 0x01

	(void)enuTimer0_init (OVF_MODE);
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	0e 94 bd 05 	call	0xb7a	; 0xb7a <enuTimer0_init>
	(void)u8Timer0_setPrescallar(TIMER_PRE_256);
    17d2:	84 e0       	ldi	r24, 0x04	; 4
    17d4:	0e 94 31 06 	call	0xc62	; 0xc62 <u8Timer0_setPrescallar>
	(void)vidTimer0_OvfIrqEnable();
    17d8:	0e 94 61 06 	call	0xcc2	; 0xcc2 <vidTimer0_OvfIrqEnable>

	return errorStatus;
    17dc:	89 81       	ldd	r24, Y+1	; 0x01

}
    17de:	0f 90       	pop	r0
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	08 95       	ret

000017e6 <HTimer_vidDelayMs>:
/*************************************************************************************************************/
void HTimer_vidDelayMs( Uint32_t u32_delay )
{
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	00 d0       	rcall	.+0      	; 0x17ec <HTimer_vidDelayMs+0x6>
    17ec:	00 d0       	rcall	.+0      	; 0x17ee <HTimer_vidDelayMs+0x8>
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	69 83       	std	Y+1, r22	; 0x01
    17f4:	7a 83       	std	Y+2, r23	; 0x02
    17f6:	8b 83       	std	Y+3, r24	; 0x03
    17f8:	9c 83       	std	Y+4, r25	; 0x04
	(void)u8Timer0_setTime_ms(u32_delay);
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	9a 81       	ldd	r25, Y+2	; 0x02
    17fe:	ab 81       	ldd	r26, Y+3	; 0x03
    1800:	bc 81       	ldd	r27, Y+4	; 0x04
    1802:	bc 01       	movw	r22, r24
    1804:	cd 01       	movw	r24, r26
    1806:	0e 94 b7 06 	call	0xd6e	; 0xd6e <u8Timer0_setTime_ms>
	(void)vidTimer0_start();
    180a:	0e 94 8c 06 	call	0xd18	; 0xd18 <vidTimer0_start>
}
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <HTimer_enCBF>:
/*************************************************************************************************************/
enu_HTimerError_t HTimer_enCBF(ptr_funcc pFunc)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	00 d0       	rcall	.+0      	; 0x1822 <HTimer_enCBF+0x6>
    1822:	0f 92       	push	r0
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	9b 83       	std	Y+3, r25	; 0x03
    182a:	8a 83       	std	Y+2, r24	; 0x02
	enu_HTimerError_t errorStatus = TIMER_OK;
    182c:	19 82       	std	Y+1, r1	; 0x01

	if(pFunc != NULL)
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	9b 81       	ldd	r25, Y+3	; 0x03
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	29 f0       	breq	.+10     	; 0x1840 <HTimer_enCBF+0x24>
	{
		vidTimer0_setcbf_OVF(pFunc);
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	9b 81       	ldd	r25, Y+3	; 0x03
    183a:	0e 94 81 07 	call	0xf02	; 0xf02 <vidTimer0_setcbf_OVF>
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <HTimer_enCBF+0x28>

	}else{
		errorStatus = TIMER_NOK;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	89 83       	std	Y+1, r24	; 0x01
	}

	return errorStatus;
    1844:	89 81       	ldd	r24, Y+1	; 0x01

}
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <HExtInt_enInit>:


ptr_func cbf = NULL;

enu_HExtIntError_t HExtInt_enInit(void)
{
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	0f 92       	push	r0
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
	enu_HExtIntError_t errorStatus = HEXTINT_OK;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	89 83       	std	Y+1, r24	; 0x01

	vidExtInt_init(INT_0 , FALL_EDGE );
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	62 e0       	ldi	r22, 0x02	; 2
    1864:	0e 94 de 07 	call	0xfbc	; 0xfbc <vidExtInt_init>
	vidExtInt_init(INT_1 , FALL_EDGE );
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	62 e0       	ldi	r22, 0x02	; 2
    186c:	0e 94 de 07 	call	0xfbc	; 0xfbc <vidExtInt_init>

	return errorStatus;
    1870:	89 81       	ldd	r24, Y+1	; 0x01

}
    1872:	0f 90       	pop	r0
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	08 95       	ret

0000187a <HExtInt_enCBF>:

enu_HExtIntError_t HExtInt_enCBF(ptr_func pFunc)
{
    187a:	df 93       	push	r29
    187c:	cf 93       	push	r28
    187e:	00 d0       	rcall	.+0      	; 0x1880 <HExtInt_enCBF+0x6>
    1880:	0f 92       	push	r0
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	9b 83       	std	Y+3, r25	; 0x03
    1888:	8a 83       	std	Y+2, r24	; 0x02
	enu_HExtIntError_t errorStatus = HEXTINT_OK;
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	89 83       	std	Y+1, r24	; 0x01

	if (pFunc != NULL)
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	9b 81       	ldd	r25, Y+3	; 0x03
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	29 f0       	breq	.+10     	; 0x18a0 <HExtInt_enCBF+0x26>
	{
		vidCallBackFunc(pFunc);
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	9b 81       	ldd	r25, Y+3	; 0x03
    189a:	0e 94 17 09 	call	0x122e	; 0x122e <vidCallBackFunc>
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <HExtInt_enCBF+0x28>
	}
	else
	{
		errorStatus = HEXTINT_NOK;
    18a0:	19 82       	std	Y+1, r1	; 0x01
	}


	return errorStatus;
    18a2:	89 81       	ldd	r24, Y+1	; 0x01

}
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <HExtInt_enCBFInt1>:

enu_HExtIntError_t HExtInt_enCBFInt1(ptr_func pFunc)
{
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <HExtInt_enCBFInt1+0x6>
    18b6:	0f 92       	push	r0
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	9b 83       	std	Y+3, r25	; 0x03
    18be:	8a 83       	std	Y+2, r24	; 0x02
	enu_HExtIntError_t errorStatus = HEXTINT_OK;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	89 83       	std	Y+1, r24	; 0x01

	if (pFunc != NULL)
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	9b 81       	ldd	r25, Y+3	; 0x03
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	29 f0       	breq	.+10     	; 0x18d6 <HExtInt_enCBFInt1+0x26>
	{
		vidCallBackFuncInt1(pFunc);
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	9b 81       	ldd	r25, Y+3	; 0x03
    18d0:	0e 94 29 09 	call	0x1252	; 0x1252 <vidCallBackFuncInt1>
    18d4:	01 c0       	rjmp	.+2      	; 0x18d8 <HExtInt_enCBFInt1+0x28>
	}
	else
	{
		errorStatus = HEXTINT_NOK;
    18d6:	19 82       	std	Y+1, r1	; 0x01
	}


	return errorStatus;
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <HButton_Init>:
#include "button.h"



enu_buttonError_t HButton_Init(enu_pin en_pinx)
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <HButton_Init+0x6>
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
    18f0:	8a 83       	std	Y+2, r24	; 0x02
	enu_buttonError_t errorStatus = BUTTON_OK;
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	89 83       	std	Y+1, r24	; 0x01

	if ( en_pinx < PIN_INVALID )
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	80 32       	cpi	r24, 0x20	; 32
    18fa:	28 f4       	brcc	.+10     	; 0x1906 <HButton_Init+0x20>
	{
//		DIO_s8SETPinDir(en_pinx, INPUT);
		DIO_s8SETPinVal(en_pinx, HIGH);
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	61 e0       	ldi	r22, 0x01	; 1
    1900:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_s8SETPinVal>
    1904:	02 c0       	rjmp	.+4      	; 0x190a <HButton_Init+0x24>
	}
	else
	{
		errorStatus = BUTTON_OK;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	89 83       	std	Y+1, r24	; 0x01
	}

	return errorStatus;
    190a:	89 81       	ldd	r24, Y+1	; 0x01
}
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <HButton_getPinVal>:


enu_buttonError_t HButton_getPinVal(enu_pin en_pinx,  Uint8_t* pu8_refVal )
{
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	00 d0       	rcall	.+0      	; 0x191c <HButton_getPinVal+0x6>
    191c:	00 d0       	rcall	.+0      	; 0x191e <HButton_getPinVal+0x8>
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	8a 83       	std	Y+2, r24	; 0x02
    1924:	7c 83       	std	Y+4, r23	; 0x04
    1926:	6b 83       	std	Y+3, r22	; 0x03
	enu_buttonError_t errorStatus = BUTTON_OK;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	89 83       	std	Y+1, r24	; 0x01

	if ( en_pinx < PIN_INVALID && pu8_refVal != NULL )
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	80 32       	cpi	r24, 0x20	; 32
    1930:	58 f4       	brcc	.+22     	; 0x1948 <HButton_getPinVal+0x32>
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	9c 81       	ldd	r25, Y+4	; 0x04
    1936:	00 97       	sbiw	r24, 0x00	; 0
    1938:	39 f0       	breq	.+14     	; 0x1948 <HButton_getPinVal+0x32>
	{
		(void)DIO_s8GETPinVal(en_pinx, pu8_refVal);
    193a:	2b 81       	ldd	r18, Y+3	; 0x03
    193c:	3c 81       	ldd	r19, Y+4	; 0x04
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	b9 01       	movw	r22, r18
    1942:	0e 94 46 0b 	call	0x168c	; 0x168c <DIO_s8GETPinVal>
    1946:	02 c0       	rjmp	.+4      	; 0x194c <HButton_getPinVal+0x36>
	}
	else
	{
		errorStatus = BUTTON_OK;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	89 83       	std	Y+1, r24	; 0x01
	}

	return errorStatus;
    194c:	89 81       	ldd	r24, Y+1	; 0x01

}
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <main>:
Uint8_t gLEDSeq = LED_SEQ0;
/*******************************************************************************
 * 								main function
 ******************************************************************************/
int main(void)
{
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
	HLed_Init(DIO_PINC_0);
    1964:	80 e1       	ldi	r24, 0x10	; 16
    1966:	0e 94 85 0b 	call	0x170a	; 0x170a <HLed_Init>
	HLed_Init(DIO_PINC_1);
    196a:	81 e1       	ldi	r24, 0x11	; 17
    196c:	0e 94 85 0b 	call	0x170a	; 0x170a <HLed_Init>
	HLed_Init(DIO_PINC_2);
    1970:	82 e1       	ldi	r24, 0x12	; 18
    1972:	0e 94 85 0b 	call	0x170a	; 0x170a <HLed_Init>
	HLed_Init(DIO_PINC_3);
    1976:	83 e1       	ldi	r24, 0x13	; 19
    1978:	0e 94 85 0b 	call	0x170a	; 0x170a <HLed_Init>

	HButton_Init(DIO_PIND_2);
    197c:	8a e1       	ldi	r24, 0x1A	; 26
    197e:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <HButton_Init>
	HButton_Init(DIO_PIND_3);
    1982:	8b e1       	ldi	r24, 0x1B	; 27
    1984:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <HButton_Init>

	(void)HExtInt_enInit();
    1988:	0e 94 29 0c 	call	0x1852	; 0x1852 <HExtInt_enInit>
	(void)HTimer_enInit();
    198c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <HTimer_enInit>

	(void)HExtInt_enCBF(ledDisplay);
    1990:	87 ee       	ldi	r24, 0xE7	; 231
    1992:	9c e0       	ldi	r25, 0x0C	; 12
    1994:	0e 94 3d 0c 	call	0x187a	; 0x187a <HExtInt_enCBF>
	(void)HExtInt_enCBFInt1(changeBlinkTime);
    1998:	8a e9       	ldi	r24, 0x9A	; 154
    199a:	9e e0       	ldi	r25, 0x0E	; 14
    199c:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <HExtInt_enCBFInt1>


	HLed_off(DIO_PINC_0);
    19a0:	80 e1       	ldi	r24, 0x10	; 16
    19a2:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
	HLed_off(DIO_PINC_1);
    19a6:	81 e1       	ldi	r24, 0x11	; 17
    19a8:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
	HLed_off(DIO_PINC_2);
    19ac:	82 e1       	ldi	r24, 0x12	; 18
    19ae:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
	HLed_off(DIO_PINC_3);
    19b2:	83 e1       	ldi	r24, 0x13	; 19
    19b4:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>

	(void)HTimer_vidDelayMs(100);
    19b8:	64 e6       	ldi	r22, 0x64	; 100
    19ba:	70 e0       	ldi	r23, 0x00	; 0
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <HTimer_vidDelayMs>
	(void)HTimer_enCBF(blink);
    19c4:	8c e3       	ldi	r24, 0x3C	; 60
    19c6:	9d e0       	ldi	r25, 0x0D	; 13
    19c8:	0e 94 0e 0c 	call	0x181c	; 0x181c <HTimer_enCBF>
    19cc:	ff cf       	rjmp	.-2      	; 0x19cc <main+0x70>

000019ce <ledDisplay>:
 ******************************************************************************/
/*
 * to choose led sequence
 */
void ledDisplay(void)
{
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
	static Uint8_t counter = 0;
	counter++;
    19d6:	80 91 a3 01 	lds	r24, 0x01A3
    19da:	8f 5f       	subi	r24, 0xFF	; 255
    19dc:	80 93 a3 01 	sts	0x01A3, r24

	if(counter == LED_SEQ1)
    19e0:	80 91 a3 01 	lds	r24, 0x01A3
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	21 f4       	brne	.+8      	; 0x19f0 <ledDisplay+0x22>
	{
		gLEDSeq = LED_SEQ1;
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	80 93 a2 01 	sts	0x01A2, r24
    19ee:	41 c0       	rjmp	.+130    	; 0x1a72 <ledDisplay+0xa4>
	}
	else if(counter == LED_SEQ2)
    19f0:	80 91 a3 01 	lds	r24, 0x01A3
    19f4:	82 30       	cpi	r24, 0x02	; 2
    19f6:	21 f4       	brne	.+8      	; 0x1a00 <ledDisplay+0x32>
	{
		gLEDSeq = LED_SEQ2;
    19f8:	82 e0       	ldi	r24, 0x02	; 2
    19fa:	80 93 a2 01 	sts	0x01A2, r24
    19fe:	39 c0       	rjmp	.+114    	; 0x1a72 <ledDisplay+0xa4>
	}
	else if(counter == LED_SEQ3)
    1a00:	80 91 a3 01 	lds	r24, 0x01A3
    1a04:	83 30       	cpi	r24, 0x03	; 3
    1a06:	21 f4       	brne	.+8      	; 0x1a10 <ledDisplay+0x42>
	{
		gLEDSeq = LED_SEQ3;
    1a08:	83 e0       	ldi	r24, 0x03	; 3
    1a0a:	80 93 a2 01 	sts	0x01A2, r24
    1a0e:	31 c0       	rjmp	.+98     	; 0x1a72 <ledDisplay+0xa4>
	}
	else if(counter == LED_SEQ4)
    1a10:	80 91 a3 01 	lds	r24, 0x01A3
    1a14:	84 30       	cpi	r24, 0x04	; 4
    1a16:	21 f4       	brne	.+8      	; 0x1a20 <ledDisplay+0x52>
	{
		gLEDSeq = LED_SEQ4;
    1a18:	84 e0       	ldi	r24, 0x04	; 4
    1a1a:	80 93 a2 01 	sts	0x01A2, r24
    1a1e:	29 c0       	rjmp	.+82     	; 0x1a72 <ledDisplay+0xa4>
	}
	else if(counter == LED_SEQ5)
    1a20:	80 91 a3 01 	lds	r24, 0x01A3
    1a24:	85 30       	cpi	r24, 0x05	; 5
    1a26:	21 f4       	brne	.+8      	; 0x1a30 <ledDisplay+0x62>
	{
		gLEDSeq = LED_SEQ5;
    1a28:	85 e0       	ldi	r24, 0x05	; 5
    1a2a:	80 93 a2 01 	sts	0x01A2, r24
    1a2e:	21 c0       	rjmp	.+66     	; 0x1a72 <ledDisplay+0xa4>
	}
	else if(counter == LED_SEQ6)
    1a30:	80 91 a3 01 	lds	r24, 0x01A3
    1a34:	86 30       	cpi	r24, 0x06	; 6
    1a36:	21 f4       	brne	.+8      	; 0x1a40 <ledDisplay+0x72>
	{
		gLEDSeq = LED_SEQ6;
    1a38:	86 e0       	ldi	r24, 0x06	; 6
    1a3a:	80 93 a2 01 	sts	0x01A2, r24
    1a3e:	19 c0       	rjmp	.+50     	; 0x1a72 <ledDisplay+0xa4>
	}
	else if(counter == LED_SEQ7)
    1a40:	80 91 a3 01 	lds	r24, 0x01A3
    1a44:	87 30       	cpi	r24, 0x07	; 7
    1a46:	21 f4       	brne	.+8      	; 0x1a50 <ledDisplay+0x82>
	{
		gLEDSeq = LED_SEQ7;
    1a48:	87 e0       	ldi	r24, 0x07	; 7
    1a4a:	80 93 a2 01 	sts	0x01A2, r24
    1a4e:	11 c0       	rjmp	.+34     	; 0x1a72 <ledDisplay+0xa4>
	}
	else if(counter == LED_SEQ8)
    1a50:	80 91 a3 01 	lds	r24, 0x01A3
    1a54:	88 30       	cpi	r24, 0x08	; 8
    1a56:	21 f4       	brne	.+8      	; 0x1a60 <ledDisplay+0x92>
	{
		gLEDSeq = LED_SEQ8;
    1a58:	88 e0       	ldi	r24, 0x08	; 8
    1a5a:	80 93 a2 01 	sts	0x01A2, r24
    1a5e:	09 c0       	rjmp	.+18     	; 0x1a72 <ledDisplay+0xa4>
	}
	else if(counter == LED_SEQ9)
    1a60:	80 91 a3 01 	lds	r24, 0x01A3
    1a64:	89 30       	cpi	r24, 0x09	; 9
    1a66:	29 f4       	brne	.+10     	; 0x1a72 <ledDisplay+0xa4>
	{
		counter = 0;
    1a68:	10 92 a3 01 	sts	0x01A3, r1
		gLEDSeq = LED_SEQ1;
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	80 93 a2 01 	sts	0x01A2, r24
	{
		/* do nothing */
	}


}
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	08 95       	ret

00001a78 <blink>:
/*************************************************************************************/
/*
 * simulate LED on duration and LED off duration
 */
void blink(void)
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
	static Uint32_t counter = 0;
	counter++;
    1a80:	80 91 a4 01 	lds	r24, 0x01A4
    1a84:	90 91 a5 01 	lds	r25, 0x01A5
    1a88:	a0 91 a6 01 	lds	r26, 0x01A6
    1a8c:	b0 91 a7 01 	lds	r27, 0x01A7
    1a90:	01 96       	adiw	r24, 0x01	; 1
    1a92:	a1 1d       	adc	r26, r1
    1a94:	b1 1d       	adc	r27, r1
    1a96:	80 93 a4 01 	sts	0x01A4, r24
    1a9a:	90 93 a5 01 	sts	0x01A5, r25
    1a9e:	a0 93 a6 01 	sts	0x01A6, r26
    1aa2:	b0 93 a7 01 	sts	0x01A7, r27
	if(counter == time1 )
    1aa6:	20 91 a4 01 	lds	r18, 0x01A4
    1aaa:	30 91 a5 01 	lds	r19, 0x01A5
    1aae:	40 91 a6 01 	lds	r20, 0x01A6
    1ab2:	50 91 a7 01 	lds	r21, 0x01A7
    1ab6:	80 91 8c 01 	lds	r24, 0x018C
    1aba:	90 91 8d 01 	lds	r25, 0x018D
    1abe:	a0 91 8e 01 	lds	r26, 0x018E
    1ac2:	b0 91 8f 01 	lds	r27, 0x018F
    1ac6:	28 17       	cp	r18, r24
    1ac8:	39 07       	cpc	r19, r25
    1aca:	4a 07       	cpc	r20, r26
    1acc:	5b 07       	cpc	r21, r27
    1ace:	09 f0       	breq	.+2      	; 0x1ad2 <blink+0x5a>
    1ad0:	89 c0       	rjmp	.+274    	; 0x1be4 <blink+0x16c>
	{
		if (gLEDSeq == LED_SEQ1)
    1ad2:	80 91 a2 01 	lds	r24, 0x01A2
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	69 f4       	brne	.+26     	; 0x1af4 <blink+0x7c>
		{
			HLed_toggle(DIO_PINC_0);
    1ada:	80 e1       	ldi	r24, 0x10	; 16
    1adc:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_off(DIO_PINC_1);
    1ae0:	81 e1       	ldi	r24, 0x11	; 17
    1ae2:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_off(DIO_PINC_2);
    1ae6:	82 e1       	ldi	r24, 0x12	; 18
    1ae8:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_off(DIO_PINC_3);
    1aec:	83 e1       	ldi	r24, 0x13	; 19
    1aee:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
    1af2:	1d c1       	rjmp	.+570    	; 0x1d2e <blink+0x2b6>
		}
		else if (gLEDSeq == LED_SEQ2)
    1af4:	80 91 a2 01 	lds	r24, 0x01A2
    1af8:	82 30       	cpi	r24, 0x02	; 2
    1afa:	69 f4       	brne	.+26     	; 0x1b16 <blink+0x9e>
		{
			HLed_toggle(DIO_PINC_0);
    1afc:	80 e1       	ldi	r24, 0x10	; 16
    1afe:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_toggle(DIO_PINC_1);
    1b02:	81 e1       	ldi	r24, 0x11	; 17
    1b04:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_off(DIO_PINC_2);
    1b08:	82 e1       	ldi	r24, 0x12	; 18
    1b0a:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_off(DIO_PINC_3);
    1b0e:	83 e1       	ldi	r24, 0x13	; 19
    1b10:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
    1b14:	0c c1       	rjmp	.+536    	; 0x1d2e <blink+0x2b6>
		}
		else if (gLEDSeq == LED_SEQ3)
    1b16:	80 91 a2 01 	lds	r24, 0x01A2
    1b1a:	83 30       	cpi	r24, 0x03	; 3
    1b1c:	69 f4       	brne	.+26     	; 0x1b38 <blink+0xc0>
		{
			HLed_toggle(DIO_PINC_0);
    1b1e:	80 e1       	ldi	r24, 0x10	; 16
    1b20:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_toggle(DIO_PINC_1);
    1b24:	81 e1       	ldi	r24, 0x11	; 17
    1b26:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_toggle(DIO_PINC_2);
    1b2a:	82 e1       	ldi	r24, 0x12	; 18
    1b2c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_off(DIO_PINC_3);
    1b30:	83 e1       	ldi	r24, 0x13	; 19
    1b32:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
    1b36:	fb c0       	rjmp	.+502    	; 0x1d2e <blink+0x2b6>
		}
		else if (gLEDSeq == LED_SEQ4)
    1b38:	80 91 a2 01 	lds	r24, 0x01A2
    1b3c:	84 30       	cpi	r24, 0x04	; 4
    1b3e:	69 f4       	brne	.+26     	; 0x1b5a <blink+0xe2>
		{
			HLed_toggle(DIO_PINC_0);
    1b40:	80 e1       	ldi	r24, 0x10	; 16
    1b42:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_toggle(DIO_PINC_1);
    1b46:	81 e1       	ldi	r24, 0x11	; 17
    1b48:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_toggle(DIO_PINC_2);
    1b4c:	82 e1       	ldi	r24, 0x12	; 18
    1b4e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_toggle(DIO_PINC_3);
    1b52:	83 e1       	ldi	r24, 0x13	; 19
    1b54:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
    1b58:	ea c0       	rjmp	.+468    	; 0x1d2e <blink+0x2b6>
		}
		else if (gLEDSeq == LED_SEQ5)
    1b5a:	80 91 a2 01 	lds	r24, 0x01A2
    1b5e:	85 30       	cpi	r24, 0x05	; 5
    1b60:	69 f4       	brne	.+26     	; 0x1b7c <blink+0x104>
		{
			HLed_off(DIO_PINC_0);
    1b62:	80 e1       	ldi	r24, 0x10	; 16
    1b64:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_toggle(DIO_PINC_1);
    1b68:	81 e1       	ldi	r24, 0x11	; 17
    1b6a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_toggle(DIO_PINC_2);
    1b6e:	82 e1       	ldi	r24, 0x12	; 18
    1b70:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_toggle(DIO_PINC_3);
    1b74:	83 e1       	ldi	r24, 0x13	; 19
    1b76:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
    1b7a:	d9 c0       	rjmp	.+434    	; 0x1d2e <blink+0x2b6>
		}
		else if (gLEDSeq == LED_SEQ6)
    1b7c:	80 91 a2 01 	lds	r24, 0x01A2
    1b80:	86 30       	cpi	r24, 0x06	; 6
    1b82:	69 f4       	brne	.+26     	; 0x1b9e <blink+0x126>
		{
			HLed_off(DIO_PINC_0);
    1b84:	80 e1       	ldi	r24, 0x10	; 16
    1b86:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_off(DIO_PINC_1);
    1b8a:	81 e1       	ldi	r24, 0x11	; 17
    1b8c:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_toggle(DIO_PINC_2);
    1b90:	82 e1       	ldi	r24, 0x12	; 18
    1b92:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_toggle(DIO_PINC_3);
    1b96:	83 e1       	ldi	r24, 0x13	; 19
    1b98:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
    1b9c:	c8 c0       	rjmp	.+400    	; 0x1d2e <blink+0x2b6>
		}
		else if (gLEDSeq == LED_SEQ7)
    1b9e:	80 91 a2 01 	lds	r24, 0x01A2
    1ba2:	87 30       	cpi	r24, 0x07	; 7
    1ba4:	69 f4       	brne	.+26     	; 0x1bc0 <blink+0x148>
		{
			HLed_off(DIO_PINC_0);
    1ba6:	80 e1       	ldi	r24, 0x10	; 16
    1ba8:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_off(DIO_PINC_1);
    1bac:	81 e1       	ldi	r24, 0x11	; 17
    1bae:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_off(DIO_PINC_2);
    1bb2:	82 e1       	ldi	r24, 0x12	; 18
    1bb4:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_toggle(DIO_PINC_3);
    1bb8:	83 e1       	ldi	r24, 0x13	; 19
    1bba:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
    1bbe:	b7 c0       	rjmp	.+366    	; 0x1d2e <blink+0x2b6>
		}
		else if (gLEDSeq == LED_SEQ8)
    1bc0:	80 91 a2 01 	lds	r24, 0x01A2
    1bc4:	88 30       	cpi	r24, 0x08	; 8
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <blink+0x152>
    1bc8:	b2 c0       	rjmp	.+356    	; 0x1d2e <blink+0x2b6>
		{
			HLed_off(DIO_PINC_0);
    1bca:	80 e1       	ldi	r24, 0x10	; 16
    1bcc:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_off(DIO_PINC_1);
    1bd0:	81 e1       	ldi	r24, 0x11	; 17
    1bd2:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_off(DIO_PINC_2);
    1bd6:	82 e1       	ldi	r24, 0x12	; 18
    1bd8:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_off(DIO_PINC_3);
    1bdc:	83 e1       	ldi	r24, 0x13	; 19
    1bde:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
    1be2:	a5 c0       	rjmp	.+330    	; 0x1d2e <blink+0x2b6>
		{

		}


	}else if(counter == time2)
    1be4:	20 91 a4 01 	lds	r18, 0x01A4
    1be8:	30 91 a5 01 	lds	r19, 0x01A5
    1bec:	40 91 a6 01 	lds	r20, 0x01A6
    1bf0:	50 91 a7 01 	lds	r21, 0x01A7
    1bf4:	80 91 90 01 	lds	r24, 0x0190
    1bf8:	90 91 91 01 	lds	r25, 0x0191
    1bfc:	a0 91 92 01 	lds	r26, 0x0192
    1c00:	b0 91 93 01 	lds	r27, 0x0193
    1c04:	28 17       	cp	r18, r24
    1c06:	39 07       	cpc	r19, r25
    1c08:	4a 07       	cpc	r20, r26
    1c0a:	5b 07       	cpc	r21, r27
    1c0c:	09 f0       	breq	.+2      	; 0x1c10 <blink+0x198>
    1c0e:	8f c0       	rjmp	.+286    	; 0x1d2e <blink+0x2b6>
	{
		if (gLEDSeq == LED_SEQ1)
    1c10:	80 91 a2 01 	lds	r24, 0x01A2
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	69 f4       	brne	.+26     	; 0x1c32 <blink+0x1ba>
		{
			HLed_toggle(DIO_PINC_0);
    1c18:	80 e1       	ldi	r24, 0x10	; 16
    1c1a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_off(DIO_PINC_1);
    1c1e:	81 e1       	ldi	r24, 0x11	; 17
    1c20:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_off(DIO_PINC_2);
    1c24:	82 e1       	ldi	r24, 0x12	; 18
    1c26:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_off(DIO_PINC_3);
    1c2a:	83 e1       	ldi	r24, 0x13	; 19
    1c2c:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
    1c30:	76 c0       	rjmp	.+236    	; 0x1d1e <blink+0x2a6>
		}
		else if (gLEDSeq == LED_SEQ2)
    1c32:	80 91 a2 01 	lds	r24, 0x01A2
    1c36:	82 30       	cpi	r24, 0x02	; 2
    1c38:	69 f4       	brne	.+26     	; 0x1c54 <blink+0x1dc>
		{
			HLed_toggle(DIO_PINC_0);
    1c3a:	80 e1       	ldi	r24, 0x10	; 16
    1c3c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_toggle(DIO_PINC_1);
    1c40:	81 e1       	ldi	r24, 0x11	; 17
    1c42:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_off(DIO_PINC_2);
    1c46:	82 e1       	ldi	r24, 0x12	; 18
    1c48:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_off(DIO_PINC_3);
    1c4c:	83 e1       	ldi	r24, 0x13	; 19
    1c4e:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
    1c52:	65 c0       	rjmp	.+202    	; 0x1d1e <blink+0x2a6>
		}
		else if (gLEDSeq == LED_SEQ3)
    1c54:	80 91 a2 01 	lds	r24, 0x01A2
    1c58:	83 30       	cpi	r24, 0x03	; 3
    1c5a:	69 f4       	brne	.+26     	; 0x1c76 <blink+0x1fe>
		{
			HLed_toggle(DIO_PINC_0);
    1c5c:	80 e1       	ldi	r24, 0x10	; 16
    1c5e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_toggle(DIO_PINC_1);
    1c62:	81 e1       	ldi	r24, 0x11	; 17
    1c64:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_toggle(DIO_PINC_2);
    1c68:	82 e1       	ldi	r24, 0x12	; 18
    1c6a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_off(DIO_PINC_3);
    1c6e:	83 e1       	ldi	r24, 0x13	; 19
    1c70:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
    1c74:	54 c0       	rjmp	.+168    	; 0x1d1e <blink+0x2a6>
		}
		else if (gLEDSeq == LED_SEQ4)
    1c76:	80 91 a2 01 	lds	r24, 0x01A2
    1c7a:	84 30       	cpi	r24, 0x04	; 4
    1c7c:	69 f4       	brne	.+26     	; 0x1c98 <blink+0x220>
		{
			HLed_toggle(DIO_PINC_0);
    1c7e:	80 e1       	ldi	r24, 0x10	; 16
    1c80:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_toggle(DIO_PINC_1);
    1c84:	81 e1       	ldi	r24, 0x11	; 17
    1c86:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_toggle(DIO_PINC_2);
    1c8a:	82 e1       	ldi	r24, 0x12	; 18
    1c8c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_toggle(DIO_PINC_3);
    1c90:	83 e1       	ldi	r24, 0x13	; 19
    1c92:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
    1c96:	43 c0       	rjmp	.+134    	; 0x1d1e <blink+0x2a6>
		}
		else if (gLEDSeq == LED_SEQ5)
    1c98:	80 91 a2 01 	lds	r24, 0x01A2
    1c9c:	85 30       	cpi	r24, 0x05	; 5
    1c9e:	69 f4       	brne	.+26     	; 0x1cba <blink+0x242>
		{
			HLed_off(DIO_PINC_0);
    1ca0:	80 e1       	ldi	r24, 0x10	; 16
    1ca2:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_toggle(DIO_PINC_1);
    1ca6:	81 e1       	ldi	r24, 0x11	; 17
    1ca8:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_toggle(DIO_PINC_2);
    1cac:	82 e1       	ldi	r24, 0x12	; 18
    1cae:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_toggle(DIO_PINC_3);
    1cb2:	83 e1       	ldi	r24, 0x13	; 19
    1cb4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
    1cb8:	32 c0       	rjmp	.+100    	; 0x1d1e <blink+0x2a6>
		}
		else if (gLEDSeq == LED_SEQ6)
    1cba:	80 91 a2 01 	lds	r24, 0x01A2
    1cbe:	86 30       	cpi	r24, 0x06	; 6
    1cc0:	69 f4       	brne	.+26     	; 0x1cdc <blink+0x264>
		{
			HLed_off(DIO_PINC_0);
    1cc2:	80 e1       	ldi	r24, 0x10	; 16
    1cc4:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_off(DIO_PINC_1);
    1cc8:	81 e1       	ldi	r24, 0x11	; 17
    1cca:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_toggle(DIO_PINC_2);
    1cce:	82 e1       	ldi	r24, 0x12	; 18
    1cd0:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
			HLed_toggle(DIO_PINC_3);
    1cd4:	83 e1       	ldi	r24, 0x13	; 19
    1cd6:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
    1cda:	21 c0       	rjmp	.+66     	; 0x1d1e <blink+0x2a6>
		}
		else if (gLEDSeq == LED_SEQ7)
    1cdc:	80 91 a2 01 	lds	r24, 0x01A2
    1ce0:	87 30       	cpi	r24, 0x07	; 7
    1ce2:	69 f4       	brne	.+26     	; 0x1cfe <blink+0x286>
		{
			HLed_off(DIO_PINC_0);
    1ce4:	80 e1       	ldi	r24, 0x10	; 16
    1ce6:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_off(DIO_PINC_1);
    1cea:	81 e1       	ldi	r24, 0x11	; 17
    1cec:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_off(DIO_PINC_2);
    1cf0:	82 e1       	ldi	r24, 0x12	; 18
    1cf2:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_toggle(DIO_PINC_3);
    1cf6:	83 e1       	ldi	r24, 0x13	; 19
    1cf8:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HLed_toggle>
    1cfc:	10 c0       	rjmp	.+32     	; 0x1d1e <blink+0x2a6>
		}
		else if (gLEDSeq == LED_SEQ8)
    1cfe:	80 91 a2 01 	lds	r24, 0x01A2
    1d02:	88 30       	cpi	r24, 0x08	; 8
    1d04:	61 f4       	brne	.+24     	; 0x1d1e <blink+0x2a6>
		{
			HLed_off(DIO_PINC_0);
    1d06:	80 e1       	ldi	r24, 0x10	; 16
    1d08:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_off(DIO_PINC_1);
    1d0c:	81 e1       	ldi	r24, 0x11	; 17
    1d0e:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_off(DIO_PINC_2);
    1d12:	82 e1       	ldi	r24, 0x12	; 18
    1d14:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
			HLed_off(DIO_PINC_3);
    1d18:	83 e1       	ldi	r24, 0x13	; 19
    1d1a:	0e 94 b3 0b 	call	0x1766	; 0x1766 <HLed_off>
		}
		else
		{

		}
		counter = 0;
    1d1e:	10 92 a4 01 	sts	0x01A4, r1
    1d22:	10 92 a5 01 	sts	0x01A5, r1
    1d26:	10 92 a6 01 	sts	0x01A6, r1
    1d2a:	10 92 a7 01 	sts	0x01A7, r1
	}
}
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	08 95       	ret

00001d34 <changeBlinkTime>:
/********************************************************************************/
/*
 * change duration of LED on and LED off
 */
void changeBlinkTime(void)
{
    1d34:	df 93       	push	r29
    1d36:	cf 93       	push	r28
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
	if(time1 == 2)
    1d3c:	80 91 8c 01 	lds	r24, 0x018C
    1d40:	90 91 8d 01 	lds	r25, 0x018D
    1d44:	a0 91 8e 01 	lds	r26, 0x018E
    1d48:	b0 91 8f 01 	lds	r27, 0x018F
    1d4c:	82 30       	cpi	r24, 0x02	; 2
    1d4e:	91 05       	cpc	r25, r1
    1d50:	a1 05       	cpc	r26, r1
    1d52:	b1 05       	cpc	r27, r1
    1d54:	c1 f4       	brne	.+48     	; 0x1d86 <changeBlinkTime+0x52>
	{
		time1 = 9;
    1d56:	89 e0       	ldi	r24, 0x09	; 9
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	a0 e0       	ldi	r26, 0x00	; 0
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	80 93 8c 01 	sts	0x018C, r24
    1d62:	90 93 8d 01 	sts	0x018D, r25
    1d66:	a0 93 8e 01 	sts	0x018E, r26
    1d6a:	b0 93 8f 01 	sts	0x018F, r27
		time2 = 10;
    1d6e:	8a e0       	ldi	r24, 0x0A	; 10
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	a0 e0       	ldi	r26, 0x00	; 0
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	80 93 90 01 	sts	0x0190, r24
    1d7a:	90 93 91 01 	sts	0x0191, r25
    1d7e:	a0 93 92 01 	sts	0x0192, r26
    1d82:	b0 93 93 01 	sts	0x0193, r27
	}
	time1--;
    1d86:	80 91 8c 01 	lds	r24, 0x018C
    1d8a:	90 91 8d 01 	lds	r25, 0x018D
    1d8e:	a0 91 8e 01 	lds	r26, 0x018E
    1d92:	b0 91 8f 01 	lds	r27, 0x018F
    1d96:	01 97       	sbiw	r24, 0x01	; 1
    1d98:	a1 09       	sbc	r26, r1
    1d9a:	b1 09       	sbc	r27, r1
    1d9c:	80 93 8c 01 	sts	0x018C, r24
    1da0:	90 93 8d 01 	sts	0x018D, r25
    1da4:	a0 93 8e 01 	sts	0x018E, r26
    1da8:	b0 93 8f 01 	sts	0x018F, r27
	time2++;
    1dac:	80 91 90 01 	lds	r24, 0x0190
    1db0:	90 91 91 01 	lds	r25, 0x0191
    1db4:	a0 91 92 01 	lds	r26, 0x0192
    1db8:	b0 91 93 01 	lds	r27, 0x0193
    1dbc:	01 96       	adiw	r24, 0x01	; 1
    1dbe:	a1 1d       	adc	r26, r1
    1dc0:	b1 1d       	adc	r27, r1
    1dc2:	80 93 90 01 	sts	0x0190, r24
    1dc6:	90 93 91 01 	sts	0x0191, r25
    1dca:	a0 93 92 01 	sts	0x0192, r26
    1dce:	b0 93 93 01 	sts	0x0193, r27


}
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <__prologue_saves__>:
    1dd8:	2f 92       	push	r2
    1dda:	3f 92       	push	r3
    1ddc:	4f 92       	push	r4
    1dde:	5f 92       	push	r5
    1de0:	6f 92       	push	r6
    1de2:	7f 92       	push	r7
    1de4:	8f 92       	push	r8
    1de6:	9f 92       	push	r9
    1de8:	af 92       	push	r10
    1dea:	bf 92       	push	r11
    1dec:	cf 92       	push	r12
    1dee:	df 92       	push	r13
    1df0:	ef 92       	push	r14
    1df2:	ff 92       	push	r15
    1df4:	0f 93       	push	r16
    1df6:	1f 93       	push	r17
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	ca 1b       	sub	r28, r26
    1e02:	db 0b       	sbc	r29, r27
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	09 94       	ijmp

00001e10 <__epilogue_restores__>:
    1e10:	2a 88       	ldd	r2, Y+18	; 0x12
    1e12:	39 88       	ldd	r3, Y+17	; 0x11
    1e14:	48 88       	ldd	r4, Y+16	; 0x10
    1e16:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e18:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e1a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e1c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e1e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e20:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e22:	b9 84       	ldd	r11, Y+9	; 0x09
    1e24:	c8 84       	ldd	r12, Y+8	; 0x08
    1e26:	df 80       	ldd	r13, Y+7	; 0x07
    1e28:	ee 80       	ldd	r14, Y+6	; 0x06
    1e2a:	fd 80       	ldd	r15, Y+5	; 0x05
    1e2c:	0c 81       	ldd	r16, Y+4	; 0x04
    1e2e:	1b 81       	ldd	r17, Y+3	; 0x03
    1e30:	aa 81       	ldd	r26, Y+2	; 0x02
    1e32:	b9 81       	ldd	r27, Y+1	; 0x01
    1e34:	ce 0f       	add	r28, r30
    1e36:	d1 1d       	adc	r29, r1
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	ed 01       	movw	r28, r26
    1e44:	08 95       	ret

00001e46 <_exit>:
    1e46:	f8 94       	cli

00001e48 <__stop_program>:
    1e48:	ff cf       	rjmp	.-2      	; 0x1e48 <__stop_program>
